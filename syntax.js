/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var syntax = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,9],$V2=[4,11,12],$V3=[1,13],$V4=[1,23],$V5=[2,39],$V6=[1,30],$V7=[1,37],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,47],$Vk=[4,11,12,14,15,20,21,35,36,37,38,39,46,49,50,58,59,60,61],$Vl=[12,14,15,20,21,35,36,38,39,46,49,50,58,59,60,61],$Vm=[2,65],$Vn=[1,55],$Vo=[2,50],$Vp=[1,61],$Vq=[1,60],$Vr=[1,59],$Vs=[1,65],$Vt=[1,79],$Vu=[1,73],$Vv=[1,74],$Vw=[1,78],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[12,14,15,20,21,35,36,37,38,39,46,49,50,58,59,60,61],$VH=[20,23,25,48,49,54,55,62,63,64,65,66,67,68,69,70,71],$VI=[12,15],$VJ=[23,25],$VK=[1,100],$VL=[20,25],$VM=[2,42],$VN=[1,102],$VO=[12,21,46,49,50,58,59,60,61],$VP=[20,21,23,25,31,33,34,47,48,49,54,55,57,62,63,64,65,66,67,68,69,70,71],$VQ=[20,23,25,48,54,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"EOF":4,"TopDefs":5,"TopDef":6,"FunctionSignature":7,"Block":8,"ClassSignature":9,"ClassBlock":10,"CLASS":11,"IDENT":12,"EXTENDS":13,"{":14,"}":15,"ClassStms":16,"ClassStm":17,"Type":18,"Items":19,";":20,"(":21,"Args":22,")":23,"Arg":24,",":25,"Stmts":26,"Stmt":27,"BlockInit":28,"ARRAY":29,"Ident":30,"=":31,"Expr":32,"INCR":33,"DECR":34,"RETURN":35,"IF":36,"ELSE":37,"WHILE":38,"FOR":39,":":40,"Item":41,"Exprs":42,"Number":43,"String":44,"Logical":45,"NEW":46,"[":47,"]":48,"-":49,"!":50,"MulOp":51,"AddOp":52,"RelOp":53,"&&":54,"||":55,"Cast":56,".":57,"NUMBER":58,"STRING_IDENT":59,"TRUE":60,"FALSE":61,"+":62,"*":63,"/":64,"%":65,"<":66,"<=":67,">":68,">=":69,"==":70,"!=":71,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",11:"CLASS",12:"IDENT",13:"EXTENDS",14:"{",15:"}",20:";",21:"(",23:")",25:",",29:"ARRAY",31:"=",33:"INCR",34:"DECR",35:"RETURN",36:"IF",37:"ELSE",38:"WHILE",39:"FOR",40:":",46:"NEW",47:"[",48:"]",49:"-",50:"!",54:"&&",55:"||",57:".",58:"NUMBER",59:"STRING_IDENT",60:"TRUE",61:"FALSE",62:"+",63:"*",64:"/",65:"%",66:"<",67:"<=",68:">",69:">=",70:"==",71:"!="},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[6,2],[6,2],[9,2],[9,4],[10,2],[10,3],[16,2],[16,1],[17,3],[17,2],[7,5],[22,0],[22,1],[22,3],[24,2],[8,2],[8,3],[26,1],[26,2],[27,2],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,2],[27,5],[27,7],[27,5],[27,8],[27,7],[27,2],[27,1],[28,0],[19,1],[19,3],[41,1],[41,3],[42,0],[42,1],[42,3],[32,1],[32,1],[32,1],[32,1],[32,4],[32,5],[32,2],[32,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[56,3],[18,1],[18,2],[30,1],[30,3],[30,4],[43,1],[44,1],[45,1],[45,1],[52,1],[52,1],[51,1],[51,1],[51,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2:
return yy.state.rootScope;
break;
case 3: case 4:
 yy.state.currentScope.addElement($$[$0]) 
break;
case 5:

      yy.state.currentFunction.loc = _$;
      yy.state.popFunction();
      yy.state.popScope(scope);

      this.$ = $$[$0-1];
    
break;
case 15:

      var scope = yy.Scope.create({
        variables: $$[$0-1],
        parent: yy.state.currentScope
      });
      var fun = yy.Function.create({
        type: $$[$0-4],
        ident: $$[$0-3],
        args: $$[$0-1],
        scope: scope,
        parent: yy.state.currentScope
      });

      scope.function = fun;

      yy.state.pushFunction(fun);
      yy.state.pushScope(scope);

      this.$ = fun;
    
break;
case 16:
this.$ = []
break;
case 17: case 40:
this.$ = [$$[$0]]
break;
case 18:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 19:
this.$ = yy.Argument.create({
      type: $$[$0-1],
      ident: $$[$0],
      loc: _$
    });
break;
case 22: case 23:

      yy.state.currentScope.addElement($$[$0]);
    
break;
case 24:

      this.$ = $$[$0-1];
      yy.state.currentScope.loc = _$;
      yy.state.popScope(scope);
    
break;
case 25: case 26:

      this.$ = $$[$0-1];
    
break;
case 27:

      this.$ = yy.Statement.create('VARIABLE_ASSIGNMENT', {
        ident: $$[$0-3],
        expr: $$[$0-1],
        loc: _$
      });
    
break;
case 28:

      this.$ = yy.Statement.create('VARIABLE_INCR', {
        ident: $$[$0-2],
        loc: _$
      });
    
break;
case 29:

      this.$ = yy.Statement.create('VARIABLE_DECR', {
        ident: $$[$0-2],
        loc: _$
      });
    
break;
case 30:

      {
        this.$ = yy.Statement.create('RETURN', {
          expr: $$[$0-1],
          loc: _$
        });
      }
    
break;
case 31:

      this.$ = yy.Statement.create('RETURN', {
        loc: _$
      });
    
break;
case 32:

      this.$ = yy.Statement.create('IF', {
        expr: $$[$0-2],
        right: $$[$0],
        loc: _$
      });
    
break;
case 33:

      this.$ = yy.Statement.create('IF', {
        expr: $$[$0-4],
        right: $$[$0-2],
        wrong: $$[$0],
        loc: _$
      });
    
break;
case 34:

      this.$ = yy.Statement.create('WHILE', {
        expr: $$[$0-2],
        stmt: $$[$0],
        loc: _$
      });
    
break;
case 37:
 this.$ = $$[$0-1]; 
break;
case 38:
this.$ = undefined;
break;
case 39:

      var scope = yy.Scope.create({
        parent: yy.state.currentScope
      });

      yy.state.pushScope(scope);

      this.$ = scope;
    
break;
case 41: case 46:

      $$[$0-2].push($$[$0]);
      this.$ = $$[$0-2];
    
break;
case 42:

      this.$ = yy.Statement.create('VARIABLE_DECLARATION', {
        type: yy.state.declarationType,
        ident: $$[$0],
        loc: _$
      })
    
break;
case 43:

      var decl = yy.Statement.create('VARIABLE_DECLARATION', {
        type: yy.state.declarationType,
        ident: $$[$0-2],
        loc: _$
      });
      var ass = yy.Statement.create('VARIABLE_ASSIGNMENT', {
        ident: $$[$0-2],
        expr: $$[$0],
        loc: _$
      });
      this.$ = [decl, ass];
    
break;
case 44:
 this.$ = [] 
break;
case 45:
 this.$ = [$$[$0]]; 
break;
case 47: case 48:
 this.$ = $$[$0]; 
break;
case 49:
 this.$ = $$[$0] 
break;
case 50:

      this.$ = yy.Expression.create('VARIABLE', {
        ident: $$[$0],
        loc: _$
      });
    
break;
case 51:

      this.$ = yy.Expression.create('FUNCALL', {
        args: $$[$0-1],
        ident: $$[$0-3],
        loc: _$
      });
    
break;
case 52: case 53: case 63: case 64:
 
break;
case 54:

      this.$ = yy.Expression.create('UMINUS', {
        expr: $$[$0],
        loc: _$
      });
    
break;
case 55:

      this.$ = yy.Expression.create('NEGATION', {
        expr: $$[$0],
        loc: _$
      });
    
break;
case 56:

      this.$ = yy.Expression.create('MULOP', {
        operator: $$[$0-1],
        left: $$[$0-2],
        right: $$[$0],
        loc: _$
      });
    
break;
case 57:

      this.$ = yy.Expression.create('ADDOP', {
        operator: $$[$0-1],
        left: $$[$0-2],
        right: $$[$0],
        loc: _$
      });
    
break;
case 58:

      this.$ = yy.Expression.create('RELOP', {
        operator: $$[$0-1],
        left: $$[$0-2],
        right: $$[$0],
        loc: _$
      });
    
break;
case 59:

      this.$ = yy.Expression.create('LOGAND', {
        operator: '&&',
        left: $$[$0-2],
        right: $$[$0],
        loc: _$
      });
    
break;
case 60:

      this.$ = yy.Expression.create('LOGOR', {
        operator: '||',
        left: $$[$0-2],
        right: $$[$0],
        loc: _$
      });
    
break;
case 61:
this.$ = $$[$0-1]
break;
case 68:

      this.$ = yy.Expression.create('OBJECT', {
        type: 'int',
        value: Number(yytext),
        loc: _$
      });
    
break;
case 69:

      this.$ = yy.Expression.create('OBJECT', {
        type: 'string',
        value: String(yytext),
        loc: _$
      });
    
break;
case 70: case 71:

      this.$ = yy.Expression.create('OBJECT', {
        type: 'boolean',
        value: JSON.parse(yytext),
        loc: _$
      });
    
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:5,9:6,11:$V0,12:$V1,18:7},{1:[3]},{1:[2,1]},{4:[1,10],6:11,7:5,9:6,11:$V0,12:$V1,18:7},o($V2,[2,3]),{8:12,14:$V3},{10:14,14:[1,15]},{12:[1,16]},{12:[1,17]},{12:[2,63],29:[1,18]},{1:[2,2]},o($V2,[2,4]),o($V2,[2,5]),{12:$V4,14:$V5,15:[1,19],20:$V6,21:$V7,26:20,27:21,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($V2,[2,6]),{7:46,12:$V1,15:[1,42],16:43,17:44,18:45},{21:$Vj},{13:[1,48],14:[2,7]},{12:[2,64]},o($Vk,[2,20]),{12:$V4,14:$V5,15:[1,49],20:$V6,21:$V7,27:50,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($Vl,[2,22]),{8:51,14:$V3},o([20,21,31,33,34,47,49,54,55,57,62,63,64,65,66,67,68,69,70,71],$Vm,{19:52,41:54,12:$Vn,29:[1,53]}),o([20,49,54,55,62,63,64,65,66,67,68,69,70,71],$Vo,{21:$Vp,31:[1,56],33:[1,57],34:[1,58],47:$Vq,57:$Vr}),{12:$Vs,20:[1,63],21:$V7,30:64,32:62,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{21:[1,66]},{21:[1,67]},{21:[1,68]},{20:[1,69],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VG,[2,38]),o($VH,[2,47]),o($VH,[2,48]),o($VH,[2,49]),{12:[1,86]},{12:$Vs,21:$V7,30:64,32:87,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:88,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:89,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VH,[2,68]),o($VH,[2,69]),o($VH,[2,70]),o($VH,[2,71]),o($V2,[2,9]),{7:46,12:$V1,15:[1,90],17:91,18:45},o($VI,[2,12]),{12:[1,93],19:92,41:54},{8:94,14:$V3},o($VJ,[2,16],{22:95,24:96,18:97,12:$V1}),{12:[1,98]},o($Vk,[2,21]),o($Vl,[2,23]),o($VG,[2,24]),{20:[1,99],25:$VK},{12:$Vn,19:101,41:54},o($VL,[2,40]),o($VL,$VM,{31:$VN}),{12:$Vs,21:$V7,30:64,32:103,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{20:[1,104]},{20:[1,105]},{12:[1,106]},{12:$Vs,21:$V7,30:64,32:107,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VJ,[2,44],{43:31,44:32,45:33,30:64,42:108,32:109,12:$Vs,21:$V7,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi}),{20:[1,110],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VG,[2,31]),o($VH,$Vo,{21:$Vp,47:$Vq,57:$Vr}),o([20,21,23,25,47,48,49,54,55,57,62,63,64,65,66,67,68,69,70,71],$Vm),{12:$Vs,21:$V7,30:64,32:111,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:112,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:[1,113]},o($VG,[2,37]),{12:$Vs,21:$V7,30:64,32:114,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:115,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:116,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:117,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$Vs,21:$V7,30:64,32:118,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VO,[2,74]),o($VO,[2,75]),o($VO,[2,76]),o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,77]),o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80]),o($VO,[2,81]),o($VO,[2,82]),o($VH,[2,53],{47:[1,119]}),o($VH,[2,54],{51:70,52:71,53:72}),o($VH,[2,55],{51:70,52:71,53:72}),{23:[1,120],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($V2,[2,10]),o($VI,[2,11]),{20:[1,121],25:$VK},o($VL,$VM,{21:$Vj,31:$VN}),o($VI,[2,14]),{23:[1,122],25:[1,123]},o($VJ,[2,17]),{12:[1,124]},{14:[2,8]},o($VG,[2,25]),{12:$Vn,41:125},{20:[1,126],25:$VK},{12:$Vs,21:$V7,30:64,32:127,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{20:[1,128],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VG,[2,28]),o($VG,[2,29]),o($VP,[2,66]),{48:[1,129],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{23:[1,130],25:[1,131]},o($VJ,[2,45],{51:70,52:71,53:72,49:$Vt,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VG,[2,30]),{23:[1,132],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{23:[1,133],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},{12:[1,134],40:[1,135]},o($VH,[2,56],{51:70,52:71,53:72}),o([20,23,25,48,49,54,55,62,66,67,68,69,70,71],[2,57],{51:70,52:71,53:72,63:$Vx,64:$Vy,65:$Vz}),o([20,23,25,48,54,55,66,67,68,69,70,71],[2,58],{51:70,52:71,53:72,49:$Vt,62:$Vw,63:$Vx,64:$Vy,65:$Vz}),o($VQ,[2,59],{51:70,52:71,53:72,49:$Vt,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VQ,[2,60],{51:70,52:71,53:72,49:$Vt,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),{12:$Vs,21:$V7,30:64,32:136,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VH,[2,61]),o($VI,[2,13]),{14:[2,15]},{12:$V1,18:97,24:137},o($VJ,[2,19]),o($VL,[2,41]),o($VG,[2,26]),o($VL,[2,43],{51:70,52:71,53:72,49:$Vt,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($VG,[2,27]),o($VP,[2,67]),o($VH,[2,51]),{12:$Vs,21:$V7,30:64,32:138,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$V4,14:$V5,20:$V6,21:$V7,27:139,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{12:$V4,14:$V5,20:$V6,21:$V7,27:140,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{40:[1,141]},{12:[1,142]},{48:[1,143],49:$Vt,51:70,52:71,53:72,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF},o($VJ,[2,18]),o($VJ,[2,46],{51:70,52:71,53:72,49:$Vt,54:$Vu,55:$Vv,62:$Vw,63:$Vx,64:$Vy,65:$Vz,66:$VA,67:$VB,68:$VC,69:$VD,70:$VE,71:$VF}),o($Vl,[2,32],{37:[1,144]}),o($VG,[2,34]),{12:[1,145]},{23:[1,146]},o($VH,[2,52]),{12:$V4,14:$V5,20:$V6,21:$V7,27:147,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},{23:[1,148]},{12:$V4,14:$V5,20:$V6,21:$V7,27:149,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VG,[2,33]),{12:$V4,14:$V5,20:$V6,21:$V7,27:150,28:22,30:24,32:29,35:$V8,36:$V9,38:$Va,39:$Vb,43:31,44:32,45:33,46:$Vc,49:$Vd,50:$Ve,58:$Vf,59:$Vg,60:$Vh,61:$Vi},o($VG,[2,36]),o($VG,[2,35])],
defaultActions: {2:[2,1],10:[2,2],18:[2,64],98:[2,8],122:[2,15]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = new Error();

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip line comments */
break;
case 2:/* skip block comments */
break;
case 3:return 60
break;
case 4:return 61
break;
case 5:return 36
break;
case 6:return 37
break;
case 7:return 38
break;
case 8:return 39
break;
case 9:return 46
break;
case 10:return 11
break;
case 11:return 35
break;
case 12:return 13
break;
case 13:return 58
break;
case 14:return 12
break;
case 15:return 59
break;
case 16:return 29
break;
case 17:return 33
break;
case 18:return 34
break;
case 19:return 63
break;
case 20:return 64
break;
case 21:return 49
break;
case 22:return 62
break;
case 23:return 66
break;
case 24:return 67
break;
case 25:return 68
break;
case 26:return 69
break;
case 27:return 70
break;
case 28:return 71
break;
case 29:return 31
break;
case 30:return 20
break;
case 31:return 40
break;
case 32:return 25
break;
case 33:return 57
break;
case 34:return 4
break;
case 35:return 50
break;
case 36:return 65
break;
case 37:return 54
break;
case 38:return 55
break;
case 39:return 21
break;
case 40:return 23
break;
case 41:return 48
break;
case 42:return 47
break;
case 43:return 14
break;
case 44:return 15
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:\/\*((\*+[^\/*])|([^*]))*\**\*\/)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:for\b)/,/^(?:new\b)/,/^(?:class\b)/,/^(?:return\b)/,/^(?:extends\b)/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][0-9a-zA-Z_]*)/,/^(?:L?"(\\.|[^\\"])*")/,/^(?:\[\])/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>=)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:\.)/,/^(?:$)/,/^(?:!)/,/^(?:%)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\()/,/^(?:\))/,/^(?:\])/,/^(?:\[)/,/^(?:\{)/,/^(?:\})/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = syntax;
exports.Parser = syntax.Parser;
exports.parse = function () { return syntax.parse.apply(syntax, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
{
   "comment": "Latte language parser",
   "lex": {
      "rules": [
         ["\\s+",                    "/* skip whitespace */"],
         ["true",                    "return 'TRUE'"],
         ["false",                   "return 'FALSE'"],
         ["if",                      "return 'IF'"],
         ["else",                    "return 'ELSE'"],
         ["while",                   "return 'WHILE'"],
         ["int",                     "return 'INTEGER'"],
         ["string",                  "return 'STRING'"],
         ["boolean",                 "return 'BOOLEAN'"],
         ["void",                    "return 'VOID'"],
         ["return",                  "return 'RETURN'"],
         ["[0-9]+",                  "return 'NUMBER'"],
         ["[a-zA-Z_][0-9a-zA-Z_]*",  "return 'LITERAL'"],
         ["\\+\\+",                  "return 'INCR'"],
         ["--",                      "return 'DECR'"],
         ["\\*",                     "return '*'"],
         ["\\/",                     "return '/'"],
         ["-",                       "return '-'"],
         ["\\+",                     "return '+'"],
         ["=",                       "return '='"],
         ["<",                       "return '<'"],
         ["<=",                      "return '<='"],
         [">",                       "return '>'"],
         [">=",                      "return '>='"],
         ["==",                      "return '=='"],
         ["!=",                      "return '!='"],
         [";",                       "return ';'"],
         [",",                       "return ','"],
         ["$",                       "return 'EOF'"],
         ["!",                       "return '!'"],
         ["%",                       "return '%'"],
         ["&&",                      "return '&&'"],
         ["\\|\\|",                  "return '||'"],
         ["\\(",                     "return '('"],
         ["\\)",                     "return ')'"],
         ["\\]",                     "return ']'"],
         ["\\[",                     "return '['"],
         ["\\{",                     "return '{'"],
         ["\\}",                     "return '}'"]
      ]
   },

   "operators": [
      ["left", "&&", "||"],
      ["left", "<", "<=", ">", ">=", "==", "!=", "RELOP"],
      ["left", "-", "+", "ADDOP"],
      ["left", "*", "/", "%", "MULOP"],
      ["nonassoc", "INCR", "DECR"],
      ["nonassoc", "UMINUS", "NEGATION"],
      ["nonassoc", "IF_WITHOUT_ELSE"],
      ["nonassoc", "ELSE"]
   ],

   "bnf": {
      "Program": [
         ["TopDefs EOF",   "return yy;"]
      ],

      "TopDefs": [
         ["TopDef", "yy.environment.add($1);"],
         ["TopDefs TopDef", "yy.environment.add($2);"]
      ],

      "TopDef": [
         ["Type Ident ( Args ) Block", "$$ = yy.Functions.create({
            type: $1,
            name: $2,
            args: $4,
            block: $6,
            location: this._$
         });"]
      ],

      "Args": [
         ["", "$$ = []"],
         ["Arg", "$$ = [$1]"],
         ["Args , Arg", "$1.push($3); $$ = $1;"]
      ],

      "Arg": [
         ["Type Ident", "$$ = yy.Variables.create({
            type: $1,
            ident: $2
         })"]
      ],

      "Block": [
         ["{ Stmts }", "$$ = $2"]
      ],

      "Stmts": [
         ["Stmt", ""],
         ["Stmts Stmt", ""]
      ],

      "Stmt": [
         ["Block", ""],
         ["Type Items ;", ""],
         ["Ident = Expr ;", ""],
         ["Ident INCR ;", ""],
         ["Ident DECR ;", ""],
         ["RETURN Expr ;", ""],
         ["RETURN ;", ""],
         ["IF ( Expr ) Stmt", "", {"prec": "IF_WITHOUT_ELSE"}],
         ["IF ( Expr ) Stmt ELSE Stmt", "", {"prec": "IF_WITH_ELSE"}],
         ["WHILE ( Expr ) Stmt", ""],
         ["Expr ;", ""],
         [";", ""]
      ],

      "Items": [
         ["Item", ""],
         ["Items , Item", ""]
      ],

      "Item": [
         ["Ident", ""],
         ["Ident = Expr", ""]
      ],

      "Type": [
         ["INTEGER", ""],
         ["STRING", ""],
         ["BOOLEAN", ""],
         ["VOID", ""]
      ],

      "Ident": [
         ["LITERAL", ""]
      ],

      "Exprs": [
         ["Expr", ""],
         ["Exprs , Expr", ""]
      ],

      "Expr": [
         ["Ident", ""],
         ["NUMBER", ""],
         ["TRUE", ""],
         ["FALSE", ""],
         ["Ident ( Exprs )", ""],
         ["- Expr", "", {"prec": "UMINUS"}],
         ["! Expr", "", {"prec": "NEGATION"}],
         ["Expr MulOp Expr", "", {"prec": "MULOP"}],
         ["Expr AddOp Expr", "", {"prec": "ADDOP"}],
         ["Expr RelOp Expr", "", {"prec": "RELOP"}],
         ["Expr && Expr", ""],
         ["Expr || Expr", ""],
         ["( Expr )", "$$ = $2"]
      ],

      "AddOp": [
         ["+", ""],
         ["-", ""]
      ],

      "MulOp": [
         ["*", ""],
         ["/", ""],
         ["%", ""]
      ],

      "RelOp": [
         ["<", ""],
         ["<=", ""],
         [">", ""],
         [">=", ""],
         ["==", ""],
         ["!=", ""]
      ]
   }
}

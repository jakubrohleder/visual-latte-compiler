{
  "bad": {
    "bad001.lat": "// Not closed comment block\n/*\n",
    "bad002.lat": "// Wat?\na\n",
    "bad003.lat": "// Repeated argument name\nint main() {\n   return f(1, 1);\n}\n\nint f(int x, int x) {\n  return 1;\n}",
    "bad004.lat": "// Double return\nint main() {\n        return 0;\n        return 1;\n}\n",
    "bad005.lat": "// Function with no type\nfoo() {}\n",
    "bad006.lat": "//Assigment to undeclared variable\nint main() {\n        x = 14;\n\treturn 0 ;\n}\n",
    "bad007.lat": "//Variable redeclaration\nint main() {\n        int x;\n        int x;\n\treturn 0 ;\n}\n",
    "bad008.lat": "//Path with no return\n  int main() {\n    if (false)\n       return 0;\n}\n",
    "bad009.lat": "// boolean to int assigment\nint main() {\n        int x;\n        x = true;\n        return 1;\n}\n",
    "bad010.lat": "// return with no value for int function\nint main() {\n        if (true)\n                return;\n\t;\n        return 1;\n}\n",
    "bad011.lat": "// boolean return for int function\nint main() {\n     return true;\n}\n",
    "bad012.lat": "// function with no return\nint main() {\n     int i = foo(true);\n     return 0 ;\n}\n\nint foo(boolean b) { b = true; }\n",
    "bad013.lat": "// Adding int to string\nint main() {\n      string x ;\n      x = \"pi\" + 1 ;\n      return 0 ;\n}\n",
    "bad015.lat": "// passing string to printInt().\n\nint main() {\n\tprintInt(\"foo\");\n\treturn 0 ;\n}\n",
    "bad016.lat": "// passing integers to printString().\n\nint main() {\n\tprintString(1);\n\treturn 0 ;\n}\n",
    "bad017.lat": "// 0 instead of 1 argument\n\nint main() {\n\tint x = foo();\n\treturn 0 ;\n}\n\nint foo(int y) {\n return y;\n}\n\n",
    "bad018.lat": "// 1 instead of 2 arguments\n\nint main() {\n\tint x = foo(1);\n\treturn 0 ;\n}\n\nint foo(int y,int z) {\n return y;\n}\n\n",
    "bad019.lat": "// 2 instead of 1 arguments\n\nint main() {\n\tint x = foo(1,2);\n\treturn 0 ;\n}\n\nint foo(int y) {\n return y;\n}\n\n",
    "bad020.lat": "// Compare string with boolean.\n\nint main() {\n  if (\"true\" == true) {\n   printString(\"foo\");\n  }\n  return 0 ;\n}",
    "bad021.lat": "/* Testing that main must return. */\n\n/* All functions should return a value of their value type. This is not a valid Javalette program: */\n\nint main() {\n}\n",
    "bad022.lat": "// Assigning string to int variable.\n\nint main () {\n int x = \"\";\n return 0 ;\n}",
    "bad023.lat": "// Assigning int to string variable.\n\nint main () {\n string x = 1;\n return 0 ;\n}",
    "bad024.lat": "// Path with no return\nint main() {\n    if (false)\n       return 0;\n}\n",
    "bad025.lat": "// Path with no return\nint main() {\n   return f(3);\n}\n\nint f(int x) {\n    if (x<0)\n       return x;\n}\n",
    "bad026.lat": "// Assigning string to int variable.\n\nint main () {\n int x;\n  x = \"foo\"+\"bar\";\n return 0 ;\n}",
    "bad027.lat": "// Assigning int to string variable.\n\nint main () {\n string x;\n x = 1;\n return 0 ;\n}",
    "bad028.lat": "// Variable declaration as an only if instruction\n\nint main () {\n if(true)\n    1+1;\n  else\n    int x;\n return 0 ;\n}",
    "bad028.s": ".cstring\n\n#---Format strings start\nPRINT_INT_FORMAT:\n  .ascii \"%ld\\12\\0\"\nREAD_INT_FORMAT:\n  .ascii \"%ld\\0\"\nERROR_STRING:\n  .ascii \"runtime error\\0\"\n#---Format strings end\n\n\n.text\n\n.globl error\nerror:\n#---Error function body start\n  leaq ERROR_STRING(%rip), %rdi\n  call _puts\n  ret\n#---Error function body end\n\n.globl printInt\nprintInt:\n#---PrintInt function body start\n  pushq %rbp\n  movq %rsp, %rbp\n  movq  16(%rbp), %rsi\n  xorq %rax, %rax\n  leaq PRINT_INT_FORMAT(%rip), %rdi\n  call _printf\n  xorq %rax, %rax\n  popq %rbp\n  retq\n#---PrintInt function body end\n\n.globl printString\nprintString:\n#---PrintString function body start\n  pushq %rbp\n  movq %rsp, %rbp\n  movq  16(%rbp), %rdi\n  xorq %rax, %rax\n  call _puts\n  popq %rbp\n  retq\n#---PrintString function body end\n\n.globl readInt\nreadInt:\n#---ReadInt function body start\n  pushq %rbp\n  movq %rsp, %rbp\n  subq  $16, %rsp\n  movq %rsp, %rsi\n  xorq %rax, %rax\n  leaq READ_INT_FORMAT(%rip), %rdi\n  call _scanf\n  movq (%rsp), %rax\n  addq  $16, %rsp\n  popq %rbp\n  retq\n#---ReadInt function body end\n\n.globl _main\n_main:\n#---_main function body start\n   #Stack size: 8\n   #Local: 0\n   #Shift: 16\n   #Spill: 0\n   #Registers: 8\n   #Calls: 0\n   #Args: 0\n  pushq %rbp\n  movq %rsp, %rbp\n  subq $32, %rsp\n#---Registers to local memory start\n  movq %r12, -8(%rbp)\n#---Registers to local memory end\n#---Args to local memory start\n#---Args to local memory end\n  movq $1, %rax\n  movq %rax, %r12\n  movq $1, %rax\n  addq %r12, %rax\n  movq $0, %rax\n  jmp .L0\n   #return 0\n  .L0:\n#---Registers from local memory start\n  movq -8(%rbp), %r12\n#---Registers from local memory end\n  addq $32, %rsp\n  popq %rbp\n  retq\n#---_main function body end\n\n",
    "bad029.lat": "// Using variable declared in if block\n\nint main () {\n if(true) {\n    int x;\n }\n x = 10;\n return 0 ;\n}",
    "bad030.lat": "//Function redeclaration\nint main() {\n  int x;\n  int x;\n\treturn 0 ;\n}\n\nint f() {\n  return 0;\n}\n\nint f() {\n  return 0;\n}",
    "bad031.lat": "// Variable declaration as an only while instruction\n\nint main () {\n  while(true)\n    int x;\n return 0 ;\n}",
    "bad032.lat": "// Using variable declared in while\n\nint main () {\n  while(true) {\n    int x;\n  }\n\n  x = 1;\n return 0 ;\n}"
  },
  "good": {
    "core000.lat": "int main() {\n  printInt(1);\n\tprintInt(2);\n  test();\n  printInt(5);\n  return 0;\n}\n\nint test() {\n  printInt(3);\n  error();\n  printInt(4);\n  return 0;\n}",
    "core000.output": "1\n2\n3\nruntime error\n",
    "core001.lat": "int main() {\n\tprintInt(fac(10));\n\tprintInt(rfac(10));\n\tprintInt(mfac(10));\n        printInt(ifac(10));\n        string r ; // just to test blocks \n\t{\n\t  int n = 10;\n\t  int r = 1;\n\t  while (n>0) {\n\t    r = r * n;\n\t    n--;\n\t  }\n\t  printInt(r);\n\t}\n\tprintString (repStr(\"=\",60));\n\tprintString (\"hello */\");\n        printString (\"/* world\") ;\n        return 0 ;\n}\n\nint fac(int a) {\n\tint r;\n\tint n;\n\n\tr = 1;\n\tn = a;\n\twhile (n > 0) {\n\t  r = r * n;\n\t  n = n - 1;\n\t}\n\treturn r;\n}\n\nint rfac(int n) {\n\tif (n == 0)\n\t  return 1;\n\telse\n\t  return n * rfac(n-1);\n}\n\nint mfac(int n) {\n\tif (n == 0)\n\t  return 1;\n\telse\n\t  return n * nfac(n-1);\n}\n\nint nfac(int n) {\n\tif (n != 0)\n\t  return mfac(n-1) * n;\n\telse\n\t  return 1;\n}\n\nint ifac(int n) { return ifac2f(1,n); }\n\nint ifac2f(int l, int h) {\n        if (l == h)\n          return l;\n        if (l > h)\n          return 1;\n        int m;\n        m = (l + h) / 2;\n        return ifac2f(l,m) * ifac2f(m+1,h);\n}\n\nstring repStr(string s, int n) {\n  string r = \"\";\n  int i = 0;\n  while(i<n) {\n    r = r + s;\n    i++;\n  }\n return r;\n}",
    "core001.output": "3628800\n3628800\n3628800\n3628800\n3628800\n============================================================\nhello */\n/* world\n",
    "core002.lat": "/* void expression as statement */\n\nint main() {\n  foo();\n  return 0 ;\n\n}\n\nvoid foo() {\n   printString(\"foo\");\n   return;\n}\n",
    "core002.output": "foo\n",
    "core003.lat": "// Testing the return checker\n\nint f () {\n   if (true)\n     return 0;\n   else\n     {}\n}\n\nint g () {\n  if (false) \n      {}\n  else\n      return 0;\n}\n\nvoid p () {}\n  \n\nint main() {\n  p();\n  return 0;\n}\n",
    "core003.output": "",
    "core004.lat": "/* allow comparing booleans. */\n\nint main() {\n  if (true == true) { printInt(42); }\n  return 0 ;\n\n}",
    "core004.output": "42\n",
    "core005.lat": "/* usage of variable initialized in both branches. */\n\nint main () {\n  int x;\n  int y = 56;\n  if (y + 45 <= 2) {\n    x = 1;\n  } else {\n    x = 2;\n  }\n  printInt(x);\n  return 0 ;\n\n}",
    "core005.output": "2\n",
    "core006.lat": "// Declaration of multiple variables of the same type in one statement:\n\nint main () {\n  int x, y;\n  x = 45;\n  y = -36;\n  printInt(x);\n  printInt(y);\n  return 0 ;\n\n}",
    "core006.output": "45\n-36\n",
    "core007.lat": "// declaration and initialization in same statement\n\nint main() {\n int x = 7;\n printInt(x);\n return 0 ;\n\n}",
    "core007.output": "7\n",
    "core008.lat": "// multiple variables of the same type declared \n// and possibly initialized in the same statement\n\nint main() {\n int x, y = 7;\n x = -1234234;\n printInt(x);\n printInt(y);\n return 0 ;\n\n}",
    "core008.output": "-1234234\n7\n",
    "core009.lat": "// Calling functions which take zero parameters\n\nint main() {\n int x = foo();\n printInt(x);\n return 0 ;\n\n}\n\nint foo() {\n return 10;\n}\n\n",
    "core009.output": "10\n",
    "core010.lat": "// count function parameters as initialized\n\nint main() {\n  printInt(fac(5));\n  return 0 ;\n}\n\nint fac (int a) {\n  int r;\n  int n;\n  r = 1;\n  n = a;\n  while (n > 0)\n  {\n    r = r * n;\n    n = n - 1;\n  }\n  return r;\n}\n",
    "core010.output": "120\n",
    "core011.lat": "/* Test pushing -1. */\n\nint main() {\n  printInt(-1);\n  return 0 ;\n}",
    "core011.output": "-1\n",
    "core012.lat": "/* Test arithmetic and comparisons. */\n\nint main() {\n    int x = 56;\n    int y = -23;\n    printInt(x+y);\n    printInt(x-y);\n    printInt(x*y);\n    printInt(45/2);\n    printInt(78%3);\n    printBool(x-y > x+y);\n    printBool(x/y <= x*y);\n    printString(\"string\"+\" \"+\"concatenation\");\n    return 0 ;\n}\n\nvoid printBool(boolean b) {\n  if (b) {\n    printString(\"true\");\n    return;\n  } else {\n    printString(\"false\");\n    return;\n }\n}",
    "core012.output": "33\n79\n-1288\n22\n0\ntrue\nfalse\nstring concatenation\n",
    "core013.lat": "/* Test boolean operators. */\n\nint main() {\n  printString(\"&&\");\n  printBool(test(-1) && test(0));\n  printBool(test(-2) && test(1));\n  printBool(test(3) && test(-5));\n  printBool(test(234234) && test(21321));\n  printString(\"||\");\n  printBool(test(-1) || test(0));\n  printBool(test(-2) || test(1));\n  printBool(test(3) || test(-5));\n  printBool(test(234234) || test(21321));\n  printString(\"!\");\n  printBool(true);\n  printBool(false);\n  return 0 ;\n\n}\n\nvoid printBool(boolean b) {\n  if (!b) {\n    printString(\"false\");\n  } else {\n    printString(\"true\");\n }\n return;\n}\n\nboolean test(int i) {\n  printInt(i);\n  return i > 0;\n}",
    "core013.output": "&&\n-1\nfalse\n-2\nfalse\n3\n-5\nfalse\n234234\n21321\ntrue\n||\n-1\n0\nfalse\n-2\n1\ntrue\n3\ntrue\n234234\ntrue\n!\ntrue\nfalse\n",
    "core014.lat": "/* Fibonacci. */\n\nint main () {\n  int lo,hi,mx ;\n  lo = 1 ;\n  hi = lo ;\n  mx = 5000000 ;\n  printInt(lo) ;\n  while (hi < mx) {\n    printInt(hi) ;\n    hi = lo + hi ;\n    lo = hi - lo ;\n  }\n  return 0 ;\n\n}\n\n",
    "core014.output": "1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\n987\n1597\n2584\n4181\n6765\n10946\n17711\n28657\n46368\n75025\n121393\n196418\n317811\n514229\n832040\n1346269\n2178309\n3524578\n",
    "core015.lat": "/* parity of positive integers by recursion */\n\nint main () {\n  printInt(ev(17)) ;\n  return 0 ;\n}\n\nint ev (int y) {\n  if (y > 0)\n    return ev (y-2) ;\n  else\n    if (y < 0)\n      return 0 ;\n    else\n      return 1 ;\n}",
    "core015.output": "0\n",
    "core016.lat": "/* parity of positive integers by loop */\n\nint main () {\n  int y = 17;\n  while (y > 0)\n    y = y - 2;\n  if (y < 0) {\n    printInt(0);\n    return 0 ;\n    }\n  else {\n    printInt(1);\n    return 0 ;\n    }\n}\n",
    "core016.output": "0\n",
    "core017.lat": "/* Test boolean operators */\n\nint main () {\n  int x = 4;\n  if (3 <= x && 4 != 2 && true) {\n    printBool(true);\n  } else {\n    printString(\"apa\");\n  }\n\n  printBool(true == true || dontCallMe(1));\n  printBool(4 < -5 && dontCallMe(2));\n\n  printBool(4 == x && true == !false && true);\n\n  printBool(implies(false,false));\n  printBool(implies(false,true));\n  printBool(implies(true,false));\n  printBool(implies(true,true));\n  return 0 ;\n\n}\n\nboolean dontCallMe(int x) {\n  printInt(x);\n  return true;\n}\n\nvoid printBool(boolean b) {\n  if (b) {\n    printString(\"true\");\n  } else {\n    printString(\"false\");\n }\n return;\n}\n\nboolean implies(boolean x, boolean y) {\n  return !x || x == y;\n}\n",
    "core017.output": "true\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue\n",
    "core018.input": "-37\nfoo\nbar\n",
    "core018.lat": "/* test input */\n\nint main() {\n  int x = readInt();\n  string y = readString();\n  string z = readString();\n\n  printInt(x-5);\n  printString(y+z);  \n  return 0 ;\n}",
    "core018.output": "-42\nfoobar\n",
    "core019.lat": "int main() {\n  int i = 78;\n  {\n    int i = 1;\n    printInt(i);\n  }\n  printInt(i);\n  while (i > 76) {\n    i--;\n    printInt(i);\n   // this is a little tricky\n   // on the right hand side, i refers to the outer i\n   int i = i + 7;\n   printInt(i);\n  }\n  printInt(i);\n  if (i > 4) {\n    int i = 4;\n    printInt(i);\n  } else {\n    printString(\"foo\");\n  } \n  printInt(i);\n  return 0 ;\n\n}",
    "core019.output": "1\n78\n77\n84\n76\n83\n76\n4\n76\n",
    "core020.lat": "int main() {\n    p();\n    printInt(1);\n    return 0;\n}\n\nvoid p() {}\n",
    "core020.output": "1\n",
    "core021.lat": "int main() {\n    if (true) {\n      printInt(1);\n      return 0;\n    }\n}",
    "core021.output": "1\n",
    "core022.lat": "int main() {\n    int x;\n    printInt(x);\n    return 0;\n}\n",
    "core022.output": "0\n"
  },
  "mine": {
    "array_length.lat": "int main() {\n\n  int[] i = new int[20];\n\n  printInt(i.length);\n  printInt(i.references);\n\n  i = new int[10];\n\n  printInt(i.length);\n  printInt(i.references);\n\n  int j=0;\n\n  while (j<i.length) {\n    i[j] = j;\n    j++;\n  }\n\n  for (int x : i)\n    printInt(x);\n\n  return 0;\n}",
    "array_length.output": "20\n0\n10\n0\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n",
    "string_length.input": "abc\n",
    "string_length.lat": "int main() {\n\n  string s = \"1234\";\n\n  string s2 = s + \"56789\";\n\n  printString(s);\n  printInt(s.length);\n  printInt(s.references);\n\n  printString(s2);\n  printInt(s2.length);\n  printInt(s2.references);\n\n  string s3;\n  s3 = s2 + readString();\n\n  printString(s3);\n  printInt(s3.length);\n  printInt(s3.references);\n\n  return 0;\n}",
    "string_length.output": "1234\n4\n0\n123456789\n9\n0\n123456789abc\n12\n0\n"
  },
  "extensions": {
    "arrays1": {
      "array000.lat": "int main() {\n  int[] a = new int[20];\n  a[10] = 1;\n  a[11] = 2;\n  printInt(a[10]);\n  printInt(a[11]);\n\n  return 0;\n}",
      "array000.output": "1\n2\n",
      "array001.lat": "int main() {\n\n  int[] a = new int[10];\n  int j=0;\n  while (j<a.length) {\n     a[j] = j;\n     j++;\n  }\n\n  for (int x : a)\n     printInt(x);\n\n  int x = 45;\n  printInt(x);\n  return 0;\n}",
      "array001.output": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n45\n",
      "array002.lat": "int [] doubleArray (int [] a){\n  int [] res = new int [a . length];\n  int i = 0 ;\n  for (int n : a){\n    res [i] = 2 * n ;\n    i ++ ;\n  }\n  return res ;\n}\n\nvoid shiftLeft (int [] a){\n  int x = a [0];\n  int i = 0 ;\n  while (i < a.length - 1){\n    a [i] = a [i + 1];\n    i ++ ;\n  }\n  a[a.length - 1]= x ;\n  return;\n }\n\nint scalProd(int[] a, int[] b) {\n  int res = 0;\n  int i = 0;\n  while (i < a.length) {\n    res = res + a[i] * b[i];\n    i++;\n  }\n  return res;\n}\n\nint main () {\n  int [] a = new int [5];\n  int i = 0 ;\n  while (i < a.length){\n    a [i]= i ;\n    i ++ ;\n    }\n  shiftLeft (a);\n  int [] b = doubleArray (a);\n  for (int x : a)printInt (x);\n  for (int x : b)printInt (x);\n  printInt(scalProd(a,b));\n  return 0 ;\n}\n ",
      "array002.output": "1\n2\n3\n4\n0\n2\n4\n6\n8\n0\n60\n"
    },
    "objects1": {
      "counter.lat": "int main () {\n  Counter c;\n  c = new Counter;\n  c.incr();\n  c.incr();\n  c.incr();\n  int x = c.value();\n  printInt(x);\n  return 0;\n}\n\nclass Counter {\n  int val;\n\n  void incr () {val++; return;}\n\n  int value () {return val;}\n\n}\n",
      "counter.output": "3\n",
      "linked.lat": "class Node {\n  int elem;\n  Node next;\n\n  void setElem(int c) { elem = c; }\n\n  void setNext(Node n) { next = n; }\n\n  int getElem() { return elem; }\n\n  Node getNext() { return next; }\n}\n\nclass Stack {\n  Node head;\n\n  void push(int c) {\n    Node newHead = new Node;\n    newHead.setElem(c);\n    newHead.setNext(head);\n    head = newHead;\n  }\n\n  boolean isEmpty() {\n    return head==(Node)null;\n  }\n\n  int top() {\n    return head.getElem();\n  }\n\n  void pop() {\n    head = head.getNext();\n  }\n}\n\nint main() {\n   Stack s = new Stack;\n   int i= 0;\n   while (i<10) {\n     s.push(i);\n     i++;\n   }\n     \n   while (!s.isEmpty()) {\n     printInt(s.top());\n     s.pop();\n   }\n   return 0;\n}\n",
      "linked.output": "9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n",
      "points.lat": "class Point2 {\n  int x;\n  int y;\n\n  void move (int dx, int dy) {\n     x = x + dx;\n     y = y + dy;\n  }\n\n  int getX () { return x; }\n\n  int getY () { return y; }\n}\n\nclass Point3 extends Point2 {\n  int z;\n\n  void moveZ (int dz) {\n    z = z + dz;\n  }\n\n  int getZ () { return z; }\n\n}\n\nclass Point4 extends Point3 {\n  int w;\n\n  void moveW (int dw) {\n    w = w + dw;\n  }\n\n  int getW () { return w; }\n\n}\n\n\n\nint main () {\n  Point2 p = new Point3;\n\n  Point3 q = new Point3;\n\n  Point4 r = new Point4;\n\n  q.move(2,4);\n  q.moveZ(7);\n  p = q;\n\n  p.move(3,5);\n \n  r.move(1,3);\n  r.moveZ(6);\n  r.moveW(2);\n\n  printInt(p.getX());  \n  printInt(p.getY());  \n  printInt(q.getZ());  \n  printInt(r.getW());\n  return 0;\n\n}",
      "points.output": "5\n9\n7\n2\n",
      "queue.lat": "class Node {\n  int elem;\n  Node next;\n\n  void setElem (int e)  { elem = e; }\n  void setNext (Node n) { next = n; }\n\n  int  getElem () { return elem; }\n  Node getNext () { return next; }\n\n}\n\nclass IntQueue {\n  Node front;\n  Node rear;\n\n  boolean isEmpty () { return front == (Node)null; }\n\n  void insert (int x) {\n    Node last = new Node;\n    last.setElem(x);\n    if (self.isEmpty())\n      front = last;\n    else \n      rear.setNext(last);\n    rear = last;\n  }\n\n  int first () { return front.getElem(); }\n\n  void rmFirst () {\n    front = front.getNext();\n  }\n\n  int size () {\n      Node n = front;\n      int res = 0;\n      while (n != (Node)null) {\n        n = n.getNext();\n        res++;\n      }\n     return res;\n  }\n}\n\nint f (int x) {\n  return x*x + 3;\n}\n\nint main () {\n  IntQueue q = new IntQueue;\n  q.insert(f(3));\n  q.insert(5);\n  q.insert(7);\n  printInt(q.first());\n  q.rmFirst();\n  printInt(q.size());\n  return 0;\n}\n\n     ",
      "queue.output": "12\n2\n"
    },
    "objects2": {
      "shapes.lat": "class Node {\n  Shape elem;\n  Node next;\n\n  void setElem(Shape c) { elem = c; }\n\n  void setNext(Node n) { next = n; }\n\n  Shape getElem() { return elem; }\n\n  Node getNext() { return next; }\n}\n\nclass Stack {\n  Node head;\n\n  void push(Shape c) {\n    Node newHead = new Node;\n    newHead.setElem(c);\n    newHead.setNext(head);\n    head = newHead;\n  }\n\n  boolean isEmpty() {\n    return head==(Node)null;\n  }\n\n  Shape top() {\n    return head.getElem();\n  }\n\n  void pop() {\n    head = head.getNext();\n  }\n}\n\nclass Shape {\n  void tell () {\n    printString(\"I'm a shape\");\n  }\n\n  void tellAgain() {\n     printString(\"I'm just a shape\");\n  }\n}\n\nclass Rectangle extends Shape {\n  void tellAgain() {\n    printString(\"I'm really a rectangle\");\n  }\n}\n\nclass Circle extends Shape {\n  void tellAgain() {\n    printString(\"I'm really a circle\");\n  }\n}\n\nclass Square extends Rectangle {\n  void tellAgain() {\n    printString(\"I'm really a square\");\n  }\n}\n\nint main() {\n  Stack stk = new Stack;\n  Shape s = new Shape;\n  stk.push(s);\n  s = new Rectangle;\n  stk.push(s);\n  s = new Square;\n  stk.push(s);\n  s = new Circle;\n  stk.push(s);\n  while (!stk.isEmpty()) {\n    s = stk.top();\n    s.tell();\n    s.tellAgain();\n    stk.pop();\n  }\n  return 0;\n}\n",
      "shapes.output": "I'm a shape\nI'm really a circle\nI'm a shape\nI'm really a square\nI'm a shape\nI'm really a rectangle\nI'm a shape\nI'm just a shape\n"
    },
    "struct": {
      "list.lat": "class list {\n  int elem;\n  list next;\n}\n\nint main() {\n  printInt(length(fromTo(1,50)));\n  printInt(length2(fromTo(1,100)));\n  return 0;\n}\n\nint head (list xs) {\n  return xs . elem;\n}\n\nlist cons (int x, list xs) {\n  list n;\n  n = new list;\n  n.elem = x;\n  n.next = xs;\n  return n;\n}\n\nint length (list xs) {\n  if (xs==null)\n    return 0;\n  else\n    return 1 + length (xs.next);\n}\n\nlist fromTo (int m, int n) {\n  if (m>n)\n    return null;\n  else\n    return cons (m,fromTo (m+1,n));\n}\n\nint length2 (list xs) {\n  int res = 0;\n  while (xs != null) {\n    res++;\n    xs = xs.next;\n  }\n  return res;\n}\n",
      "list.output": "50\n100\n"
    }
  },
  "extra": {
    "gr5": {
      "bfs.lat": "/******************************************************************\n *                                                                *\n * bfs test by Michał Gregorczyk (mg277528@students.mimuw.edu.pl) *\n *                               (michalg89@gmail.com)            *\n *                                                                *\n ******************************************************************\n * 22. stycznia 12:00                                             *\n *                                                                *\n * Mój kompilator jeszcze nie potrafi                             *\n * skompilować tego testu, dlatego                                *\n * nie sprawidziłem jego poprawności.                             *\n * Test przechodzi natomiast przez                                *\n * analizę semantyczną.                                           *\n *                                                                *\n * Będę wdzięczny za wszelkie uwagi                               *\n * typu \"nie działa, daje zły wynik\"                              *\n * lub \"u mnie działa\".                                           *\n *****************************************************************/\n\nclass Node{\n    boolean visited;\n    int value;\n    List neighbours;\n\n    void init(int val){\n        visited = false;\n        value = val;\n        neighbours = null;    \n    }\n\n    boolean isVisited(){\n        return visited;\n    }\n\n    void markAsVisited(){\n        visited = true;\n    }\n\n    int getValue(){\n        return value;\n    }\n\n    List getNeighbours(){\n        return neighbours;\n    }\n\n    void addNeighbour(Node n){\n        if (neighbours == null){\n            neighbours = new List;\n            neighbours.makeSingleton(n);\n        }\n        else{\n            List newNeighbours = new List;\n            newNeighbours.cons(n, neighbours);\n            neighbours = newNeighbours;\n        }\n    }\n}\n\nclass List{\n    Node head;\n    List tail;\n\n    void makeSingleton(Node node){\n        head = node;\n        tail = null;\n    }\n\n    Node getHead(){\n        return head;\n    }\n\n    List getTail(){\n        return tail;\n    }\n\n    void cons(Node newHead, List newTail){\n        self.head = newHead;\n        self.tail = newTail;\n    }\n}\n\nclass Queue{\n    List first;\n    List last;\n\n    Node get(){\n        if (first == null)\n            return null;\n\n        Node retEl = first.head;\n\n        first = first.tail;\n        if (first == null)\n            last = null;\n\n        return retEl;\n    }\n\n    void put(Node n){\n        List newTail = new List;\n        newTail.makeSingleton(n);\n        if (first == null){\n            first = newTail;\n            last = newTail;\n        }\n        else{\n            last.cons(last.getHead(), newTail);\n            last = newTail;\n        }\n    }\n\n    boolean isEmpty(){\n        return (first == null);\n    }\n}\n\nint main(){\n    Node graph = prepareData();\n    graph.markAsVisited();\n    Queue q = new Queue;\n    q.put(graph);\n    bfs(q);\n    return 0;\n}\n\nNode prepareData(){\n    Node n1 = new Node;\n    n1.init(1);\n    Node n2 = new Node;\n    n2.init(2);\n    Node n3 = new Node;\n    n3.init(3);\n    Node n4 = new Node;\n    n4.init(4);\n    Node n5 = new Node;\n    n5.init(5);\n    Node n6 = new Node;\n    n6.init(6);\n    Node n7 = new Node;\n    n7.init(7);\n    Node n8 = new Node;\n    n8.init(8);\n    Node n9 = new Node;\n    n9.init(9);\n\n    n1.addNeighbour(n3);\n    n1.addNeighbour(n2);\n    \n    n2.addNeighbour(n3);\n\n    n3.addNeighbour(n6);\n    n3.addNeighbour(n5);\n    n3.addNeighbour(n4);\n\n    n4.addNeighbour(n2);\n\n    n5.addNeighbour(n7);\n\n    n7.addNeighbour(n8);\n\n    n8.addNeighbour(n9);\n\n    n9.addNeighbour(n5);\n\n    return n1;\n}\n\nvoid bfs(Queue q){\n    while (! q.isEmpty()){\n        Node el = q.get();\n        printInt(el.getValue());\n        List neigh = el.getNeighbours();\n        while(neigh != null){\n            Node n = neigh.getHead();\n            if (!n.isVisited()){\n                n.markAsVisited();\n                q.put(n);\n            }\n            neigh = neigh.getTail();\n        }\n    }\n}",
      "bfs.out": "1\n2\n3\n4\n5\n6\n7\n8\n9\n\n",
      "calculator.lat": "int main() {\n    Node w = plus(minus(liczba(4), liczba(3)), razy(liczba(2), podziel(liczba(4), liczba(2))));\n    printInt(w.value());\n    return 0;\n}\n\nNode plus(Node n1, Node n2) {\n    Operator res = new Plus;\n    res.left = n1;\n    res.right = n2;\n    return res;\n}\nNode razy(Node n1, Node n2) {\n    Operator res = new Razy;\n    res.left = n1;\n    res.right = n2;\n    return res;\n}\nNode podziel(Node n1, Node n2) {\n    Operator res = new Podziel;\n    res.left = n1;\n    res.right = n2;\n    return res;\n}\nNode minus(Node n1, Node n2) {\n    Operator res = new Minus;\n    res.left = n1;\n    res.right = n2;\n    return res;\n}\nNode liczba(int l) {\n    Liczba res = new Liczba;\n    res.v = l;\n    return res;\n}\n\nclass Node {\n    int value() {\n        error();\n        return 0;\n    }\n}\n\nclass Liczba extends Node {\n    int v;\n    int value() {\n        return v;\n    }\n}\n\nclass Operator extends Node {\n    Node left;\n    Node right;\n\n    int operator(int n1, int n2) {\n        error();\n        return 0;\n    }\n    int value() {\n        return self.operator(left.value(), right.value());\n    }\n}\n\nclass Plus extends Operator {\n    int operator(int a, int b) {\n        return a + b;\n    }\n}\n\nclass Minus extends Operator {\n    int operator(int a, int b) {\n        return a - b;\n    }\n}\n\nclass Razy extends Operator {\n    int operator(int a, int b) {\n        return a * b;\n    }\n}\n\nclass Podziel extends Operator {\n    int operator(int a, int b) {\n        return a / b;\n    }\n}\n",
      "calculator.output": "5\n",
      "heapsort.input": "1000\n623264485\n-426052093\n993414272\n-578707343\n-587897960\n-435775295\n784315430\n527785302\n-974396465\n-178116655\n-221438089\n-327822994\n514956622\n309827122\n-590425943\n26087364\n156641338\n-351004878\n-408427659\n854533224\n-437756790\n-306416330\n-480494226\n812518563\n-56044354\n600841933\n675238315\n-927735612\n219308561\n630025053\n-617819008\n-807655633\n-231112566\n281999239\n-142220478\n-357296057\n-917574409\n-800044378\n989715046\n-474572962\n-600528798\n-121388508\n-274210728\n-366820456\n67125123\n536006164\n-245322239\n-169290055\n-49143532\n618840349\n379421800\n856223235\n48970676\n356893309\n176996870\n314521573\n999800722\n-615824543\n501062917\n874044710\n-925725932\n-925264522\n948728898\n13488289\n-995131134\n812609432\n-676292718\n-27789277\n890035085\n-758432829\n275350167\n-224023938\n-838514197\n820044860\n-263105848\n-558179585\n824747226\n-687335425\n-938972184\n344803893\n-998871377\n227371094\n845547423\n-990775260\n-992660248\n-608882506\n-935721809\n-860718304\n-849710558\n-526117178\n679226278\n-474034528\n-141003148\n775016430\n-994201467\n-742346475\n55762323\n687471147\n658525347\n-502231031\n554256918\n-595061282\n-570643917\n-357366939\n38595464\n-73119368\n-763593314\n-557575348\n242740250\n-690568972\n549378209\n-987144859\n307990087\n746781517\n-944498271\n-751869986\n-944613529\n-541527545\n-624774251\n407175851\n-832876654\n-919050407\n-398865491\n504617275\n482597500\n-236573641\n839508535\n445365533\n-929018086\n-421921978\n-458703274\n-166654810\n-855737404\n-887586491\n695720050\n-288598987\n475362642\n573735832\n369531972\n-5875142\n-166285254\n-939577006\n355452283\n-420006995\n-485838698\n-965192814\n-111176882\n-446104306\n-869197040\n-31948652\n-297103836\n-731713799\n518005154\n6896918\n-254637534\n34853111\n-693820476\n-411558344\n-223282043\n893096833\n-839241721\n-670032773\n-43592365\n-571976350\n870751747\n-583463898\n-926939259\n157185059\n197379381\n-713999570\n-259174976\n-916523291\n-875299819\n-960613758\n-874436826\n-50202427\n1861260\n-989595660\n-641959518\n-662797920\n-853985873\n633107615\n-348807002\n24052274\n312622060\n-860543211\n-54406154\n216781922\n-885523680\n444119684\n-540649406\n-898277607\n-748723861\n245218171\n153659982\n-919047642\n-352394136\n-135366748\n-983289238\n123376333\n-942712046\n-795557469\n-908216683\n-291049727\n87964755\n747866727\n-32726624\n-487577358\n-122080376\n982465678\n91866941\n-240086228\n-214482705\n607198956\n143541526\n671270479\n-895678560\n-577740363\n631749371\n445506207\n-859677462\n-536148240\n-409108290\n152586242\n214473354\n969079590\n597668860\n-967508421\n-936404576\n548918609\n-121707471\n807429072\n304226289\n-234345706\n-370293566\n-323376178\n90665489\n-958053522\n-941706961\n-521436559\n-110505128\n106646937\n-940796508\n-251838517\n-166708404\n390991885\n-106370047\n885476600\n-63478932\n201941013\n791421809\n-294387077\n-168301873\n-620637834\n-939023981\n-525748286\n436743181\n36516199\n-659587871\n-589783505\n86124595\n-114931335\n877313533\n178807407\n679445874\n-930768203\n228632661\n573867522\n435362155\n447932334\n-885950266\n278466214\n607770463\n-988558560\n170237497\n526372853\n-943623044\n-926831679\n-182201528\n-156421896\n-669843566\n988926037\n-850545343\n476036856\n-979651352\n-450172937\n-678685200\n563955042\n-807448386\n-895395884\n-121772125\n-279210706\n-649588469\n-33558557\n562510240\n679568164\n977076180\n-295112771\n519860951\n-867493961\n674412690\n228370542\n463400783\n-753249210\n-650394827\n-701115581\n-613820200\n-171682634\n540970508\n-561454864\n-535775752\n-591153415\n684367342\n32482240\n261139920\n-684960450\n322526995\n255458515\n464429830\n-637925457\n565672250\n136379059\n550771842\n960808502\n-975553748\n-301219213\n968105313\n-744619150\n513619244\n-692648454\n-40737413\n166561680\n-976057703\n-742782801\n-835117818\n-79071756\n126352979\n-453830252\n129847358\n294139132\n-117985292\n-910934238\n718117131\n329503155\n-607820950\n-274019293\n703143942\n-69297669\n-956807631\n-915326903\n466566965\n921164136\n589001107\n-765028743\n-913026787\n-91615560\n-243963443\n-954325800\n-5382579\n-477713501\n303523404\n837167981\n-237619899\n434919505\n-549235275\n827910106\n931581207\n-424945650\n262048950\n-439278769\n-116513619\n53670109\n-116631199\n224986696\n-574324117\n66537424\n-751516341\n556647045\n921097561\n-529924918\n-892950492\n175741926\n697514235\n-198502750\n746846766\n4658025\n770993461\n-36248393\n451593175\n512262305\n123597890\n486029159\n-542739297\n484146355\n25228580\n755444179\n619973967\n104786703\n6505359\n-393118706\n454068655\n-832018275\n475339917\n191796757\n-51880670\n-287081430\n211139377\n769502973\n682923555\n-610925752\n-916818979\n-988434250\n112032020\n-628019701\n-452011124\n639160596\n451913256\n-550587269\n-420216582\n286599887\n-128540834\n-224269578\n-672018383\n943998717\n-29768839\n-168208744\n944581269\n-976235610\n-876371965\n-361828895\n208428617\n306916240\n-121495836\n69411223\n303783218\n908894585\n533087562\n93857828\n-991503124\n-488452261\n205810432\n-747246115\n-688108571\n-900851477\n527873145\n501980836\n-878359833\n-998145175\n109272717\n241015012\n378127020\n569692245\n-871558033\n-910968710\n138746227\n-466424875\n-947100350\n612144848\n-482713863\n14301503\n-359828965\n-538486225\n-901432892\n-654034172\n409438767\n692730559\n-993366696\n402747840\n-92529886\n-578654996\n291898069\n871174513\n79513323\n438569805\n671814709\n-486223185\n-984814882\n813207880\n791888230\n-897700271\n-196898788\n-212651311\n-824816791\n-895886374\n786023524\n-829049898\n972728275\n-355908108\n934847964\n792348074\n240963249\n-491853721\n-980469319\n273114732\n859725663\n932219603\n-432842313\n686820023\n452502514\n763137349\n-929936663\n-828060088\n428595769\n541916123\n299110912\n-309141065\n969524863\n-508562417\n-630648881\n456517203\n-481461332\n-409246450\n-21985231\n-345611555\n42838828\n378139029\n771527508\n349544948\n-920338578\n-12792527\n-462658011\n-61926512\n523660189\n561789695\n-693213416\n-946119159\n484679300\n392500607\n-519083157\n788416640\n737345068\n-776590383\n44017963\n868508151\n363123776\n-334242964\n-11296818\n-946596965\n482601955\n-161698456\n841325688\n921484946\n-461596164\n604666841\n535957661\n-913028513\n-120624442\n-317455348\n817807537\n788912137\n475228559\n467686498\n409802444\n362598957\n-564941309\n997085249\n989860980\n-169343871\n-953629044\n967577278\n-881885160\n-680300439\n-813563067\n-733108042\n707283170\n779230623\n966779933\n602039307\n-675333337\n-935858339\n578062789\n78254273\n752552925\n-728691777\n-230478620\n199311426\n-454373960\n-418318410\n-23078014\n615337387\n-512802065\n-871968819\n627401929\n392492511\n-655152629\n938884791\n-80177241\n873819407\n-564909806\n-620927477\n635397059\n-524827340\n882697074\n465667820\n841619650\n-580346661\n-222628175\n-854761926\n-86639765\n-367639111\n-807107580\n390079617\n-406472794\n-649789073\n889857309\n548653233\n-286914609\n867416277\n-808133366\n329563491\n406246202\n722381779\n-861518260\n176287988\n-862239966\n-654480028\n-641612084\n881558024\n649007293\n589108916\n-953082880\n995494547\n24736230\n-929547683\n-732924169\n-497330613\n-836279989\n-284326930\n-738619357\n420408786\n382246250\n-917885849\n-153492008\n-819339831\n961067172\n-923054352\n-559649558\n-258768868\n-681000723\n301665627\n-321719000\n25568724\n29793446\n167735749\n-718316490\n200794582\n850708815\n-290089443\n-952411233\n-39509715\n-674354504\n335518716\n-436018632\n989517765\n504692565\n-399487117\n794367328\n-181173125\n-51921851\n-979210497\n516826107\n-481993188\n-758215654\n-369556902\n-827166212\n419584172\n-592139366\n-854125586\n432434871\n641194027\n268049721\n-516051981\n193784144\n-862122066\n765538781\n628741668\n-712834233\n-708840\n764406580\n927192284\n972353134\n-218451954\n468024070\n-359075893\n-766507003\n-135822490\n-200494091\n-509366716\n883883355\n-923860236\n366717092\n-70923068\n-357601213\n396119640\n176462358\n-79087023\n-130239490\n-856293559\n502534659\n-160191260\n402965096\n-736075588\n223861429\n-159333763\n-217468354\n-180479906\n861591647\n81557986\n443482494\n-512483501\n39685388\n-934635876\n-350838040\n248134960\n-215991176\n-975869377\n274928634\n-866278128\n195607942\n-421803785\n-619717170\n-497809662\n-297721944\n-382836720\n-682768050\n662971796\n-932690333\n697174947\n541534775\n332246017\n394304097\n-272597785\n972108781\n-30325531\n-934596600\n870800183\n230599954\n-721577379\n-917875666\n579180164\n-469376925\n829919181\n338366380\n180029982\n-247572571\n664085667\n608270388\n971229974\n231950749\n506397716\n341698329\n345522003\n185501511\n-629381489\n282738077\n-609472094\n-107509090\n-931066278\n-486146570\n302853423\n314215549\n151422648\n-14698181\n-278730084\n985774544\n-130597019\n-422832521\n-729813946\n236579820\n997782721\n-172628998\n-332183711\n238830001\n161869142\n-534132577\n-891598601\n-163819663\n-450062009\n-961801951\n-955517263\n883008759\n-738293326\n-542439138\n-913532273\n564142317\n192598892\n544700393\n-150303432\n-916034174\n-683118497\n-932023639\n-982600877\n-630715731\n-667030747\n-980665264\n-872649236\n490578136\n749989497\n-862553233\n522892444\n543201362\n425286315\n754497567\n-257348388\n-429313480\n-133625862\n211010706\n754413123\n470884951\n479110840\n-854809792\n-329597136\n761723086\n922865213\n-885768812\n-966803702\n731915913\n317398353\n-42281699\n-18449358\n-900252513\n-142757142\n-787073317\n-48994721\n972423179\n958794361\n-467483183\n445786270\n-447625915\n-820559386\n-208640890\n6335899\n-946265632\n-391135255\n-569808740\n794551018\n758621058\n326688145\n-675053786\n-679895623\n-452271496\n558055686\n973806731\n589832708\n326787382\n992822473\n212345099\n-440763843\n693651427\n-696207396\n273666509\n-603976533\n-85412184\n936961933\n-185396942\n-174653819\n-3611906\n-782783448\n-963610436\n714046400\n632203942\n-504453584\n-292969354\n37048471\n-303626955\n-844108835\n-867239185\n-924491528\n-944462826\n-156145871\n-325658685\n383275986\n-938465720\n267009753\n-814924981\n-476523\n373991105\n-223154456\n889967895\n259788488\n223842043\n-485154265\n-199345618\n-534333828\n20943136\n-403052778\n995845017\n-527365421\n-972641000\n-738787458\n-257381074\n-978667082\n-939932576\n821838234\n-186640088\n406627829\n693935827\n-211263890\n-981268514\n-274053751\n124008336\n941944140\n-201306126\n875146568\n265848651\n-854729825\n452881742\n694371404\n667027808\n664710294\n368958142\n-912817717\n-872743364\n-943947513\n-85214868\n-41715349\n910260504\n-132231922\n16640169\n291424851\n-639749472\n-25776797\n354048093\n-397908208\n-586196520\n243039374\n41840802\n784185223\n486879900\n870762808\n-397561671\n943083545\n-378679114\n474639288\n-846256611\n-457688418\n-289839194\n-893959937\n389868987\n348436090\n-229562161\n569852310\n-476312872\n221574890\n65510910\n-824267963\n-261668766\n-27462528\n-60745413\n-952961741\n883994073\n789493543\n-490499034\n165434973\n-732753076\n230745791\n-417978567\n-753787654\n-962604900\n-127305715\n-940461015\n-908174960\n-151337757\n-972581626\n-302415131\n195664310\n525573191\n501359604\n-581987822\n111666309\n-332073537\n-56959228\n256940144\n-403635331\n-205188666\n45806198\n858602738\n-760911696\n-584778209\n458272234\n-901942726\n-632879622\n-528324785\n83197428\n80296777\n721179301\n255786817\n-460249397\n-382540307\n4077947\n-388442897\n-416504421\n399864051\n831752272\n-917644241\n-387753646\n430318901\n-562175411\n238892701\n-931815605\n",
      "heapsort.lat": "// Program zaliczeniowy 3: \"tablice - heap sort\"\n// autor: Bolek Kulbabinski\n//   Wejscie: dlugosc tablicy n > 0 po czym n liczb calkowitych.\n//   Wyjscie: n liczb w kolejnosci niemalejacej\n\nvoid swap(int[] tab, int x, int y) {\n    int temp = tab[x];\n    tab[x] = tab[y];\n    tab[y] = temp;\n}\n\n// Poprawienie kopca typu max.\nvoid heapDown(int[] heap, int index, int heapSize) {\n    while (index * 2 < heapSize - 1) {\n        int left = index * 2 + 1;\n        int right = left + 1;\n        int max = left;\n        if (right < heapSize && heap[right] > heap[max]) {\n            max = right;\n        }\n        if (heap[max] > heap[index]) {\n            swap(heap, max, index);\n            index = max;\n        } else {\n            return;\n        }\n    }\n}\n\nint extractMax(int[] heap, int heapSize) {\n    int max = heap[0];\n    heap[0] = heap[heapSize - 1];\n    heapDown(heap, 0, heapSize - 1);\n    return max;\n}\n\nvoid heapSort(int[] heap) {\n    // Budowanie kopca.\n    int i = heap.length / 2;\n    while (i >= 0) {\n        heapDown(heap, i, heap.length);\n        i--;\n    }\n\n    // Sortowanie.\n    i = heap.length - 1;\n    while (i >= 0) {\n        heap[i] = extractMax(heap, i + 1);\n        i--;\n    }\n}\n\nint main() {\n    int n = readInt();\n    int[] tab = new int[n];\n\n    int i = 0;\n    while (i < n) {\n        tab[i] = readInt();\n        i++;\n    }\n\n    heapSort(tab);\n\n    for (int elem : tab) {\n        printInt(elem);\n    }\n\n    return 0;\n}\n\n",
      "heapsort.output": "-998871377\n-998145175\n-995131134\n-994201467\n-993366696\n-992660248\n-991503124\n-990775260\n-989595660\n-988558560\n-988434250\n-987144859\n-984814882\n-983289238\n-982600877\n-981268514\n-980665264\n-980469319\n-979651352\n-979210497\n-978667082\n-976235610\n-976057703\n-975869377\n-975553748\n-974396465\n-972641000\n-972581626\n-967508421\n-966803702\n-965192814\n-963610436\n-962604900\n-961801951\n-960613758\n-958053522\n-956807631\n-955517263\n-954325800\n-953629044\n-953082880\n-952961741\n-952411233\n-947100350\n-946596965\n-946265632\n-946119159\n-944613529\n-944498271\n-944462826\n-943947513\n-943623044\n-942712046\n-941706961\n-940796508\n-940461015\n-939932576\n-939577006\n-939023981\n-938972184\n-938465720\n-936404576\n-935858339\n-935721809\n-934635876\n-934596600\n-932690333\n-932023639\n-931815605\n-931066278\n-930768203\n-929936663\n-929547683\n-929018086\n-927735612\n-926939259\n-926831679\n-925725932\n-925264522\n-924491528\n-923860236\n-923054352\n-920338578\n-919050407\n-919047642\n-917885849\n-917875666\n-917644241\n-917574409\n-916818979\n-916523291\n-916034174\n-915326903\n-913532273\n-913028513\n-913026787\n-912817717\n-910968710\n-910934238\n-908216683\n-908174960\n-901942726\n-901432892\n-900851477\n-900252513\n-898277607\n-897700271\n-895886374\n-895678560\n-895395884\n-893959937\n-892950492\n-891598601\n-887586491\n-885950266\n-885768812\n-885523680\n-881885160\n-878359833\n-876371965\n-875299819\n-874436826\n-872743364\n-872649236\n-871968819\n-871558033\n-869197040\n-867493961\n-867239185\n-866278128\n-862553233\n-862239966\n-862122066\n-861518260\n-860718304\n-860543211\n-859677462\n-856293559\n-855737404\n-854809792\n-854761926\n-854729825\n-854125586\n-853985873\n-850545343\n-849710558\n-846256611\n-844108835\n-839241721\n-838514197\n-836279989\n-835117818\n-832876654\n-832018275\n-829049898\n-828060088\n-827166212\n-824816791\n-824267963\n-820559386\n-819339831\n-814924981\n-813563067\n-808133366\n-807655633\n-807448386\n-807107580\n-800044378\n-795557469\n-787073317\n-782783448\n-776590383\n-766507003\n-765028743\n-763593314\n-760911696\n-758432829\n-758215654\n-753787654\n-753249210\n-751869986\n-751516341\n-748723861\n-747246115\n-744619150\n-742782801\n-742346475\n-738787458\n-738619357\n-738293326\n-736075588\n-733108042\n-732924169\n-732753076\n-731713799\n-729813946\n-728691777\n-721577379\n-718316490\n-713999570\n-712834233\n-701115581\n-696207396\n-693820476\n-693213416\n-692648454\n-690568972\n-688108571\n-687335425\n-684960450\n-683118497\n-682768050\n-681000723\n-680300439\n-679895623\n-678685200\n-676292718\n-675333337\n-675053786\n-674354504\n-672018383\n-670032773\n-669843566\n-667030747\n-662797920\n-659587871\n-655152629\n-654480028\n-654034172\n-650394827\n-649789073\n-649588469\n-641959518\n-641612084\n-639749472\n-637925457\n-632879622\n-630715731\n-630648881\n-629381489\n-628019701\n-624774251\n-620927477\n-620637834\n-619717170\n-617819008\n-615824543\n-613820200\n-610925752\n-609472094\n-608882506\n-607820950\n-603976533\n-600528798\n-595061282\n-592139366\n-591153415\n-590425943\n-589783505\n-587897960\n-586196520\n-584778209\n-583463898\n-581987822\n-580346661\n-578707343\n-578654996\n-577740363\n-574324117\n-571976350\n-570643917\n-569808740\n-564941309\n-564909806\n-562175411\n-561454864\n-559649558\n-558179585\n-557575348\n-550587269\n-549235275\n-542739297\n-542439138\n-541527545\n-540649406\n-538486225\n-536148240\n-535775752\n-534333828\n-534132577\n-529924918\n-528324785\n-527365421\n-526117178\n-525748286\n-524827340\n-521436559\n-519083157\n-516051981\n-512802065\n-512483501\n-509366716\n-508562417\n-504453584\n-502231031\n-497809662\n-497330613\n-491853721\n-490499034\n-488452261\n-487577358\n-486223185\n-486146570\n-485838698\n-485154265\n-482713863\n-481993188\n-481461332\n-480494226\n-477713501\n-476312872\n-474572962\n-474034528\n-469376925\n-467483183\n-466424875\n-462658011\n-461596164\n-460249397\n-458703274\n-457688418\n-454373960\n-453830252\n-452271496\n-452011124\n-450172937\n-450062009\n-447625915\n-446104306\n-440763843\n-439278769\n-437756790\n-436018632\n-435775295\n-432842313\n-429313480\n-426052093\n-424945650\n-422832521\n-421921978\n-421803785\n-420216582\n-420006995\n-418318410\n-417978567\n-416504421\n-411558344\n-409246450\n-409108290\n-408427659\n-406472794\n-403635331\n-403052778\n-399487117\n-398865491\n-397908208\n-397561671\n-393118706\n-391135255\n-388442897\n-387753646\n-382836720\n-382540307\n-378679114\n-370293566\n-369556902\n-367639111\n-366820456\n-361828895\n-359828965\n-359075893\n-357601213\n-357366939\n-357296057\n-355908108\n-352394136\n-351004878\n-350838040\n-348807002\n-345611555\n-334242964\n-332183711\n-332073537\n-329597136\n-327822994\n-325658685\n-323376178\n-321719000\n-317455348\n-309141065\n-306416330\n-303626955\n-302415131\n-301219213\n-297721944\n-297103836\n-295112771\n-294387077\n-292969354\n-291049727\n-290089443\n-289839194\n-288598987\n-287081430\n-286914609\n-284326930\n-279210706\n-278730084\n-274210728\n-274053751\n-274019293\n-272597785\n-263105848\n-261668766\n-259174976\n-258768868\n-257381074\n-257348388\n-254637534\n-251838517\n-247572571\n-245322239\n-243963443\n-240086228\n-237619899\n-236573641\n-234345706\n-231112566\n-230478620\n-229562161\n-224269578\n-224023938\n-223282043\n-223154456\n-222628175\n-221438089\n-218451954\n-217468354\n-215991176\n-214482705\n-212651311\n-211263890\n-208640890\n-205188666\n-201306126\n-200494091\n-199345618\n-198502750\n-196898788\n-186640088\n-185396942\n-182201528\n-181173125\n-180479906\n-178116655\n-174653819\n-172628998\n-171682634\n-169343871\n-169290055\n-168301873\n-168208744\n-166708404\n-166654810\n-166285254\n-163819663\n-161698456\n-160191260\n-159333763\n-156421896\n-156145871\n-153492008\n-151337757\n-150303432\n-142757142\n-142220478\n-141003148\n-135822490\n-135366748\n-133625862\n-132231922\n-130597019\n-130239490\n-128540834\n-127305715\n-122080376\n-121772125\n-121707471\n-121495836\n-121388508\n-120624442\n-117985292\n-116631199\n-116513619\n-114931335\n-111176882\n-110505128\n-107509090\n-106370047\n-92529886\n-91615560\n-86639765\n-85412184\n-85214868\n-80177241\n-79087023\n-79071756\n-73119368\n-70923068\n-69297669\n-63478932\n-61926512\n-60745413\n-56959228\n-56044354\n-54406154\n-51921851\n-51880670\n-50202427\n-49143532\n-48994721\n-43592365\n-42281699\n-41715349\n-40737413\n-39509715\n-36248393\n-33558557\n-32726624\n-31948652\n-30325531\n-29768839\n-27789277\n-27462528\n-25776797\n-23078014\n-21985231\n-18449358\n-14698181\n-12792527\n-11296818\n-5875142\n-5382579\n-3611906\n-708840\n-476523\n1861260\n4077947\n4658025\n6335899\n6505359\n6896918\n13488289\n14301503\n16640169\n20943136\n24052274\n24736230\n25228580\n25568724\n26087364\n29793446\n32482240\n34853111\n36516199\n37048471\n38595464\n39685388\n41840802\n42838828\n44017963\n45806198\n48970676\n53670109\n55762323\n65510910\n66537424\n67125123\n69411223\n78254273\n79513323\n80296777\n81557986\n83197428\n86124595\n87964755\n90665489\n91866941\n93857828\n104786703\n106646937\n109272717\n111666309\n112032020\n123376333\n123597890\n124008336\n126352979\n129847358\n136379059\n138746227\n143541526\n151422648\n152586242\n153659982\n156641338\n157185059\n161869142\n165434973\n166561680\n167735749\n170237497\n175741926\n176287988\n176462358\n176996870\n178807407\n180029982\n185501511\n191796757\n192598892\n193784144\n195607942\n195664310\n197379381\n199311426\n200794582\n201941013\n205810432\n208428617\n211010706\n211139377\n212345099\n214473354\n216781922\n219308561\n221574890\n223842043\n223861429\n224986696\n227371094\n228370542\n228632661\n230599954\n230745791\n231950749\n236579820\n238830001\n238892701\n240963249\n241015012\n242740250\n243039374\n245218171\n248134960\n255458515\n255786817\n256940144\n259788488\n261139920\n262048950\n265848651\n267009753\n268049721\n273114732\n273666509\n274928634\n275350167\n278466214\n281999239\n282738077\n286599887\n291424851\n291898069\n294139132\n299110912\n301665627\n302853423\n303523404\n303783218\n304226289\n306916240\n307990087\n309827122\n312622060\n314215549\n314521573\n317398353\n322526995\n326688145\n326787382\n329503155\n329563491\n332246017\n335518716\n338366380\n341698329\n344803893\n345522003\n348436090\n349544948\n354048093\n355452283\n356893309\n362598957\n363123776\n366717092\n368958142\n369531972\n373991105\n378127020\n378139029\n379421800\n382246250\n383275986\n389868987\n390079617\n390991885\n392492511\n392500607\n394304097\n396119640\n399864051\n402747840\n402965096\n406246202\n406627829\n407175851\n409438767\n409802444\n419584172\n420408786\n425286315\n428595769\n430318901\n432434871\n434919505\n435362155\n436743181\n438569805\n443482494\n444119684\n445365533\n445506207\n445786270\n447932334\n451593175\n451913256\n452502514\n452881742\n454068655\n456517203\n458272234\n463400783\n464429830\n465667820\n466566965\n467686498\n468024070\n470884951\n474639288\n475228559\n475339917\n475362642\n476036856\n479110840\n482597500\n482601955\n484146355\n484679300\n486029159\n486879900\n490578136\n501062917\n501359604\n501980836\n502534659\n504617275\n504692565\n506397716\n512262305\n513619244\n514956622\n516826107\n518005154\n519860951\n522892444\n523660189\n525573191\n526372853\n527785302\n527873145\n533087562\n535957661\n536006164\n540970508\n541534775\n541916123\n543201362\n544700393\n548653233\n548918609\n549378209\n550771842\n554256918\n556647045\n558055686\n561789695\n562510240\n563955042\n564142317\n565672250\n569692245\n569852310\n573735832\n573867522\n578062789\n579180164\n589001107\n589108916\n589832708\n597668860\n600841933\n602039307\n604666841\n607198956\n607770463\n608270388\n612144848\n615337387\n618840349\n619973967\n623264485\n627401929\n628741668\n630025053\n631749371\n632203942\n633107615\n635397059\n639160596\n641194027\n649007293\n658525347\n662971796\n664085667\n664710294\n667027808\n671270479\n671814709\n674412690\n675238315\n679226278\n679445874\n679568164\n682923555\n684367342\n686820023\n687471147\n692730559\n693651427\n693935827\n694371404\n695720050\n697174947\n697514235\n703143942\n707283170\n714046400\n718117131\n721179301\n722381779\n731915913\n737345068\n746781517\n746846766\n747866727\n749989497\n752552925\n754413123\n754497567\n755444179\n758621058\n761723086\n763137349\n764406580\n765538781\n769502973\n770993461\n771527508\n775016430\n779230623\n784185223\n784315430\n786023524\n788416640\n788912137\n789493543\n791421809\n791888230\n792348074\n794367328\n794551018\n807429072\n812518563\n812609432\n813207880\n817807537\n820044860\n821838234\n824747226\n827910106\n829919181\n831752272\n837167981\n839508535\n841325688\n841619650\n845547423\n850708815\n854533224\n856223235\n858602738\n859725663\n861591647\n867416277\n868508151\n870751747\n870762808\n870800183\n871174513\n873819407\n874044710\n875146568\n877313533\n881558024\n882697074\n883008759\n883883355\n883994073\n885476600\n889857309\n889967895\n890035085\n893096833\n908894585\n910260504\n921097561\n921164136\n921484946\n922865213\n927192284\n931581207\n932219603\n934847964\n936961933\n938884791\n941944140\n943083545\n943998717\n944581269\n948728898\n958794361\n960808502\n961067172\n966779933\n967577278\n968105313\n969079590\n969524863\n971229974\n972108781\n972353134\n972423179\n972728275\n973806731\n977076180\n982465678\n985774544\n988926037\n989517765\n989715046\n989860980\n992822473\n993414272\n995494547\n995845017\n997085249\n997782721\n999800722\n",
      "heapsort2.input": "28\r\n3 \r\n5 \r\n4 \r\n6 \r\n10 \r\n8 \r\n1 \r\n2 \r\n9 \r\n7\r\n11\r\n45\r\n67\r\n85\r\n2456\r\n255\r\n577\r\n35456\r\n53456455\r\n3453453\r\n345345\r\n7674\r\n67548\r\n958623\r\n477743205\r\n534508534\r\n568666\r\n533122678\r\n",
      "heapsort2.lat": "// Author: Robert Rosolek 277585\r\n//\r\n// input is in format :\r\n// n    <-- number of elements to sort\r\n// a_1\r\n// ...       <-- elements to sort\r\n// a_n\r\n//\r\n// code based on wazniak.mimuw.edu.pl\r\n\r\n// assuming that a[p + 1] ... a[r] is a heap,\r\n// this function makes a[p] ... a[r] a heap \r\nvoid maxHeapify(int[] a, int p, int r) {\r\n\tint s = p, v = a[s];\r\n\twhile (2 * s <= r) {\r\n\t\tint t = 2 * s;\r\n\t\tif (t < r)\r\n\t\t\tif (a[t + 1] > a[t])\r\n\t\t\t\tt++;\r\n\t\tif (v >= a[t]) {\r\n\t\t\ta[s] = v;\r\n\t\t\ts = r + 1; // force to leave the loop\r\n\t\t}\r\n\t\telse {\r\n\t\t\ta[s] = a[t];\r\n\t\t\ts = t;\r\n\t\t}\r\n\t}\r\n\tif (s <= r)\r\n\t\ta[s] = v;\r\n} \r\n\r\nint main() {\r\n\r\n\t// number of elements to sort\r\n\tint n;\r\n\t\r\n\t// array of elements to sort\r\n\tint[] a; \r\n    \r\n    // read data from input\r\n    n = readInt();\r\n    a = new int[n];\r\n    int i = 0;\r\n\twhile (i < a.length) {\r\n\t\ta[i] = readInt();\r\n\t\ti++;\r\n\t}\r\n    \t\r\n    // build heap\r\n    i = (n - 1) / 2;\r\n    while (i >= 0) {\r\n    \tmaxHeapify(a, i, n - 1);\r\n    \ti--;\r\n    }\r\n \r\n \t// sort   \t\r\n    i = n - 1;\r\n    while (i >= 1) {\r\n    \t// swap a[i] and a[0]\r\n    \tint tmp = a[i];\r\n    \ta[i] = a[0];\r\n    \ta[0] = tmp;\r\n    \t\r\n    \tmaxHeapify(a, 0, i - 1);\r\n    \t\r\n    \ti--;\r\n    }\r\n\r\n\t// assert that array is sorted    \r\n\ti = 0;\r\n\twhile (i < n - 1) {\r\n\t\tif (a[i] > a[i + 1])\r\n\t\t\terror();\r\n\t\ti++;\r\n\t}\r\n\t\r\n\t// output sorted array\r\n\tfor (int it : a)\r\n\t\tprintInt(it);\r\n\t\t\r\n\treturn 0;\r\n}\r\n",
      "heapsort2.output": "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n45\n67\n85\n255\n577\n2456\n7674\n35456\n67548\n345345\n568666\n958623\n3453453\n53456455\n477743205\n533122678\n534508534\n",
      "lista2Kierunkowa.lat": "// autor: Pawel Magryta pm262455\n\n\n\n\n\n\n\n\nint main(){\n\tint dlugoscListy = 30;\n\tlistaTest(dlugoscListy );\n\treturn 0;\n}\n\n\n###### krotki test listy:\n# lista to klasa z publicznymi obiektami bez metod\n\nvoid listaTest(int dlugoscListy){\n\t 30;\n\tLista lista = zwrocListeDlugosci(dlugoscListy);\n\tLista odKonca = przejdzSieNaKoniecIWypisuj(lista, dlugoscListy);\n\tlista = wrocNaPoczatekIWypisuj(odKonca, dlugoscListy);\n\tprintString(\"po spacerku wartosc pierwszego elementu:\");\n\tprintInt(lista.wartosc);\n\tif (dlugoscListy >= 5){\n\t\tLista drugi = lista.nastepny;\n\t\tprintString(\"po spacerku wartosc drugiego elementu:\");\n\t\tprintInt(lista.nastepny.wartosc);\n\t} else {\n\t\treturn;\n\t}\n}\n\n\nLista przejdzSieNaKoniecIWypisuj(Lista start, int dl){\n\tLista a = start, b = start;\n\tprintString(\"idziemy na koniec listy: \");\n\tint i = 0;\n\twhile (i < dl){\n\t\tprintInt(a.wartosc);\n\t\tb = a;\n\t\ta = a.nastepny;\n\t\ti++;\n\t}\n\treturn b;\n}\n\nLista wrocNaPoczatekIWypisuj(Lista odKonca, int dl){\n\tLista a = odKonca, b;\n\tprintString(\"wracamy na poczatek listy: \");\n\tint w = dl;\n\twhile (w > 0){\n\t\tprintInt(a.wartosc);\n\t\tb = a;\n\t\ta = a.poprzedni;\n\t\tw--;\n\t}\n\treturn b;\n}\n\nclass Lista{\n\tLista poprzedni, nastepny;\n\tint wartosc;\n}\n\nLista zwrocListeDlugosci(int dlugoscListy){\n\tprintString(\"Krotki test listy:\");\n\tLista start = new Lista, a, n;\n\ta = start;\n\tint wsk = 1;\n\tstart.wartosc = 0;\n\twhile (wsk != dlugoscListy){\n\t\tstart.poprzedni = null;\n\t\ta.nastepny = new Lista;\n\t\tn = a;\n\t\ta = a.nastepny;\n\t\ta.wartosc = wsk;\n\t\ta.poprzedni = n;\n\t\twsk++;\n\t}\n\ta.nastepny = null;\n\tprintString(\"wygenerowal liste 2kierunkowa dlugosci :\");\n\tprintInt(dlugoscListy);\n\tprintString(\"__________\");\n\treturn start;\n}\n\n\n\n\n",
      "lista2Kierunkowa.output": "Krotki test listy:\nwygenerowal liste 2kierunkowa dlugosci :\n30\n__________\nidziemy na koniec listy:\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\nwracamy na poczatek listy:\n29\n28\n27\n26\n25\n24\n23\n22\n21\n20\n19\n18\n17\n16\n15\n14\n13\n12\n11\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\npo spacerku wartosc pierwszego elementu:\n0\npo spacerku wartosc drugiego elementu:\n1\n",
      "mergeSort.lat": "// autor: Pawel Magryta pm262455\n\n\n\n\n\n\n\n\nint main(){\n\tint dlugoscListy = 30;\n\ttestMergeSort(dlugoscListy);\n\treturn 0;\n}\n\n\n////// merge sort na tablicoListach\n\nvoid testMergeSort(int dlugoscListy){\n\tLista start = generujTablicoListeDoSortowaniaMerge13co7Malejaco(dlugoscListy, true);\n\tLista malejaco = mergeSort(start, 0, dlugoscListy);\n\tprzejdzSieNaKoniecIWypisuj(malejaco, dlugoscListy);\n}\n\nLista mergeSort(Lista start, int pocz, int kon1Za){\n\tLista i1, i2;\n\tif (kon1Za - pocz > 1){\n\t\tint srodek = (kon1Za - pocz) /2 + pocz;\n\t\ti1 = mergeSort(start, pocz, srodek);\n\t\ti2 = mergeSort(start, srodek, kon1Za);\n\t\treturn scalaj(i1, srodek - pocz, i2, kon1Za - srodek);\n\t}\n\tLista n = new Lista;\n\tn.wartosc = pokazWartosc(start, pocz);\n\treturn n;\n}\n\nLista scalaj(Lista lj, int ljLength, Lista ld, int ldLength){\n\tint w1 = 0, w2 = 0, ws = 0;\n\tLista start = generujTablicoListeDoSortowaniaMerge13co7Malejaco(ljLength + ldLength, false);\n\tint wart = pokazWartosc(lj, w1);\n\tint wart2 = pokazWartosc(ld, w2);\n\twhile (ws < ljLength + ldLength){\n\t\tif (w1 == ljLength)\twart = -1;\n\t\telse wart = pokazWartosc(lj, w1);\n\t\tif (w2 == ldLength)\twart2 = -1;\n\t\telse wart2 = pokazWartosc(ld, w2);\n\t\tif (wart2 > wart){\n\t\t\tw2++;\t\t\n\t\t\tladujWartosc(start, ws, wart2);\n\t\t} else{\n\t\t\tw1++;\n\t\t\tladujWartosc(start, ws, wart);\n\t\t}\n\t\tws++;\n\t}\n\treturn start;\n}\n\n//////////////////////////////////\nint pokazWartosc(Lista start, int poz){\n\tint w = 0;\n\tLista a = start;\n\twhile (w != poz) {\n\t\ta = a.nastepny;\n\t\tw++;\n\t}\n\treturn a.wartosc;\n}\nvoid ladujWartosc(Lista start, int poz, int wartosc){\n\tint w = 0;\n\tLista a = start;\n\twhile (w != poz) {\n\t\ta = a.nastepny;\n\t\tw++;\n\t}\n\ta.wartosc = wartosc;\n}\n///////////////////////////////\n\nLista generujTablicoListeDoSortowaniaMerge13co7Malejaco(int dlugoscListy, boolean pisz){\n\tif (pisz) printString(\"robimy liste do mergeSorta:\");\n\tLista start = new Lista, a, n;\n\ta = start;\n\tint wsk = 1;\n\tstart.wartosc = 0;\n\tif (pisz) printInt(start.wartosc);\n\twhile (wsk != dlugoscListy){\n\t\tstart.poprzedni = null;\n\t\ta.nastepny = new Lista;\n\t\tn = a;\n\t\ta = a.nastepny;\n\t\tif (wsk % 5 == 3) a.wartosc = dlugoscListy - wsk / 2;\n\t\telse a.wartosc = wsk % 13;\n\t\t\n\t\ta.poprzedni = n;\n\t\t//a.wartosc = wsk;\n\t\tif (pisz) printInt(a.wartosc);\n\t\twsk++;\n\t}\n\ta.nastepny = null;\n\tif (pisz) printString(\"wygenerowal liste 2kierunkowa dziwna dlugosci :\");\n\tif (pisz) printInt(dlugoscListy);\n\tif (pisz) printString(\"__________\");\n\treturn start;\n}\n\n###### listy\n\nLista przejdzSieNaKoniecIWypisuj(Lista start, int dl){\n\tLista a = start, b = start;\n\tprintString(\"idziemy na koniec listy (ma byc nierosnaco): \");\n\tint wsk = 0;\n\twhile (wsk < dl){\n\t\tprintInt(a.wartosc);\n\t\tb = a;\n\t\ta = a.nastepny;\n\t\twsk++;\n\t}\n\treturn b;\n}\n\nclass Lista{\n\tLista poprzedni, nastepny;\n\tint wartosc;\n}\n\n\n\n",
      "mergeSort.output": "robimy liste do mergeSorta:\n0\n1\n2\n29\n4\n5\n6\n7\n26\n9\n10\n11\n12\n24\n1\n2\n3\n4\n21\n6\n7\n8\n9\n19\n11\n12\n0\n1\n16\n3\nwygenerowal liste 2kierunkowa dziwna dlugosci :\n30\n__________\nidziemy na koniec listy (ma byc nierosnaco):\n29\n26\n24\n21\n19\n16\n12\n12\n11\n11\n10\n9\n9\n8\n7\n7\n6\n6\n5\n4\n4\n3\n3\n2\n2\n1\n1\n1\n0\n0\n"
    },
    "bad": {
      "infinite_loop": {
        "infinite_while.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    while(true) {\n    }\n}\n"
      },
      "runtime": {
        "error.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    error();\n    printInt(1);\n    return 0;\n}\n",
        "error.output": "runtime error\n"
      },
      "semantic": {
        "big_number.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    int i = 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999;\n    return 0;\n}\n",
        "declaration_in_if.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    if(true)\n        int a;\n    return 0;\n}\n",
        "declaration_in_if_condition.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    if(int i = 0) {\n    }\n    return 0;\n}\n",
        "declaration_in_while.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    while(true)\n        int a;\n    return 0;\n}\n",
        "function_with_void_argument.lat": "// Author: Jacek Tomaszewski 277663\n// void parameter type\n\nint main() {\n   return 0;\n}\n\nint f(void x) {\n   return 2;\n}",
        "main_with_argument.lat": "// Author: Jacek Tomaszewski 277663\n//main parameter\n\nint main(int y) {\n\treturn 0 ;\n}\n",
        "main_with_void_type.lat": "// Author: Jacek Tomaszewski 277663\n//main void type\n\nvoid main() {\n\treturn 0 ;\n}\n",
        "negation.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    string i;\n    -i;\n    return 0;\n}\n",
        "no_main.lat": "// Author: Tomasz Biczel 277568\nint f() {\n  return 0;\n}",
        "redefined_functions.lat": "// Author: Tomasz Biczel 277568\nint main() {\n  foo();\n  return 0 ;\n}\n\nvoid foo() {\n   printString(\"foo\");\n   return;\n}\n\nint foo(int x) {\n    x = x + 1;\n    return x - 5;\n}\n",
        "redefinition_of_printInt.lat": "// Author: Jacek Tomaszewski 277663\n//redefinition of builtin\n\nint main() {\n   return 0; \n}\n\nvoid printInt(int x) {\n    \n}\n",
        "return_void_result.lat": "/**\n * @author Cezary Bartoszuk <cbart@students.mimuw.edu.pl>\n */\nint main() {\n    return 0;\n}\n\nvoid f() {\n    return g();\n}\n\nvoid g() {\n}",
        "string_decrementation.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    string a;\n    a--;\n    return 0;\n}\n",
        "string_incrementation.lat": "// Author:  Tomasz Wysocki 277696\nint main() {\n    string a;\n    a++;\n    return 0;\n}\n",
        "string_sub.lat": "// Author: Tomasz Biczel 277568\nint main() {\n  string x;\n  x = \"asd\" - \"ewq\";\n  return 0;\n}",
        "undeclared_variable_as_instruction.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    i;\n    return 0;\n}\n",
        "variable_with_void_type.lat": "// Author: Jacek Tomaszewski 277663\n// void variable type\n\nint main() {\n   void x;\n   return 0;\n}\n",
        "while_true_bad_return_type.lat": "// Author: Tomasz Biczel 277568\nint main() {\n    while (true) {\n        string x;\n        x = readString();\n        if (x == \"exit\")\n            return \"asd\";\n        else\n            printString(\"jeszcze raz\");\n    }\n}"
      }
    },
    "good": {
      "arrays": {
        "array_length.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    printInt((new int[1]).length);\n    return 0;\n}\n",
        "array_length.output": "1\n",
        "array_new.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    string[] a = new string[1];\n    return 0;\n}\n",
        "array_new.output": "",
        "array_read.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    (new int[1])[0];\n    return 0;\n}\n",
        "array_read.output": "",
        "array_string.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    string[] a = new string[1];\n    a[0] = \"abc\";\n    printString(a[0]);\n    return 0;\n}\n",
        "array_string.output": "abc\n",
        "heapsort.input": "1000\n623264485\n-426052093\n993414272\n-578707343\n-587897960\n-435775295\n784315430\n527785302\n-974396465\n-178116655\n-221438089\n-327822994\n514956622\n309827122\n-590425943\n26087364\n156641338\n-351004878\n-408427659\n854533224\n-437756790\n-306416330\n-480494226\n812518563\n-56044354\n600841933\n675238315\n-927735612\n219308561\n630025053\n-617819008\n-807655633\n-231112566\n281999239\n-142220478\n-357296057\n-917574409\n-800044378\n989715046\n-474572962\n-600528798\n-121388508\n-274210728\n-366820456\n67125123\n536006164\n-245322239\n-169290055\n-49143532\n618840349\n379421800\n856223235\n48970676\n356893309\n176996870\n314521573\n999800722\n-615824543\n501062917\n874044710\n-925725932\n-925264522\n948728898\n13488289\n-995131134\n812609432\n-676292718\n-27789277\n890035085\n-758432829\n275350167\n-224023938\n-838514197\n820044860\n-263105848\n-558179585\n824747226\n-687335425\n-938972184\n344803893\n-998871377\n227371094\n845547423\n-990775260\n-992660248\n-608882506\n-935721809\n-860718304\n-849710558\n-526117178\n679226278\n-474034528\n-141003148\n775016430\n-994201467\n-742346475\n55762323\n687471147\n658525347\n-502231031\n554256918\n-595061282\n-570643917\n-357366939\n38595464\n-73119368\n-763593314\n-557575348\n242740250\n-690568972\n549378209\n-987144859\n307990087\n746781517\n-944498271\n-751869986\n-944613529\n-541527545\n-624774251\n407175851\n-832876654\n-919050407\n-398865491\n504617275\n482597500\n-236573641\n839508535\n445365533\n-929018086\n-421921978\n-458703274\n-166654810\n-855737404\n-887586491\n695720050\n-288598987\n475362642\n573735832\n369531972\n-5875142\n-166285254\n-939577006\n355452283\n-420006995\n-485838698\n-965192814\n-111176882\n-446104306\n-869197040\n-31948652\n-297103836\n-731713799\n518005154\n6896918\n-254637534\n34853111\n-693820476\n-411558344\n-223282043\n893096833\n-839241721\n-670032773\n-43592365\n-571976350\n870751747\n-583463898\n-926939259\n157185059\n197379381\n-713999570\n-259174976\n-916523291\n-875299819\n-960613758\n-874436826\n-50202427\n1861260\n-989595660\n-641959518\n-662797920\n-853985873\n633107615\n-348807002\n24052274\n312622060\n-860543211\n-54406154\n216781922\n-885523680\n444119684\n-540649406\n-898277607\n-748723861\n245218171\n153659982\n-919047642\n-352394136\n-135366748\n-983289238\n123376333\n-942712046\n-795557469\n-908216683\n-291049727\n87964755\n747866727\n-32726624\n-487577358\n-122080376\n982465678\n91866941\n-240086228\n-214482705\n607198956\n143541526\n671270479\n-895678560\n-577740363\n631749371\n445506207\n-859677462\n-536148240\n-409108290\n152586242\n214473354\n969079590\n597668860\n-967508421\n-936404576\n548918609\n-121707471\n807429072\n304226289\n-234345706\n-370293566\n-323376178\n90665489\n-958053522\n-941706961\n-521436559\n-110505128\n106646937\n-940796508\n-251838517\n-166708404\n390991885\n-106370047\n885476600\n-63478932\n201941013\n791421809\n-294387077\n-168301873\n-620637834\n-939023981\n-525748286\n436743181\n36516199\n-659587871\n-589783505\n86124595\n-114931335\n877313533\n178807407\n679445874\n-930768203\n228632661\n573867522\n435362155\n447932334\n-885950266\n278466214\n607770463\n-988558560\n170237497\n526372853\n-943623044\n-926831679\n-182201528\n-156421896\n-669843566\n988926037\n-850545343\n476036856\n-979651352\n-450172937\n-678685200\n563955042\n-807448386\n-895395884\n-121772125\n-279210706\n-649588469\n-33558557\n562510240\n679568164\n977076180\n-295112771\n519860951\n-867493961\n674412690\n228370542\n463400783\n-753249210\n-650394827\n-701115581\n-613820200\n-171682634\n540970508\n-561454864\n-535775752\n-591153415\n684367342\n32482240\n261139920\n-684960450\n322526995\n255458515\n464429830\n-637925457\n565672250\n136379059\n550771842\n960808502\n-975553748\n-301219213\n968105313\n-744619150\n513619244\n-692648454\n-40737413\n166561680\n-976057703\n-742782801\n-835117818\n-79071756\n126352979\n-453830252\n129847358\n294139132\n-117985292\n-910934238\n718117131\n329503155\n-607820950\n-274019293\n703143942\n-69297669\n-956807631\n-915326903\n466566965\n921164136\n589001107\n-765028743\n-913026787\n-91615560\n-243963443\n-954325800\n-5382579\n-477713501\n303523404\n837167981\n-237619899\n434919505\n-549235275\n827910106\n931581207\n-424945650\n262048950\n-439278769\n-116513619\n53670109\n-116631199\n224986696\n-574324117\n66537424\n-751516341\n556647045\n921097561\n-529924918\n-892950492\n175741926\n697514235\n-198502750\n746846766\n4658025\n770993461\n-36248393\n451593175\n512262305\n123597890\n486029159\n-542739297\n484146355\n25228580\n755444179\n619973967\n104786703\n6505359\n-393118706\n454068655\n-832018275\n475339917\n191796757\n-51880670\n-287081430\n211139377\n769502973\n682923555\n-610925752\n-916818979\n-988434250\n112032020\n-628019701\n-452011124\n639160596\n451913256\n-550587269\n-420216582\n286599887\n-128540834\n-224269578\n-672018383\n943998717\n-29768839\n-168208744\n944581269\n-976235610\n-876371965\n-361828895\n208428617\n306916240\n-121495836\n69411223\n303783218\n908894585\n533087562\n93857828\n-991503124\n-488452261\n205810432\n-747246115\n-688108571\n-900851477\n527873145\n501980836\n-878359833\n-998145175\n109272717\n241015012\n378127020\n569692245\n-871558033\n-910968710\n138746227\n-466424875\n-947100350\n612144848\n-482713863\n14301503\n-359828965\n-538486225\n-901432892\n-654034172\n409438767\n692730559\n-993366696\n402747840\n-92529886\n-578654996\n291898069\n871174513\n79513323\n438569805\n671814709\n-486223185\n-984814882\n813207880\n791888230\n-897700271\n-196898788\n-212651311\n-824816791\n-895886374\n786023524\n-829049898\n972728275\n-355908108\n934847964\n792348074\n240963249\n-491853721\n-980469319\n273114732\n859725663\n932219603\n-432842313\n686820023\n452502514\n763137349\n-929936663\n-828060088\n428595769\n541916123\n299110912\n-309141065\n969524863\n-508562417\n-630648881\n456517203\n-481461332\n-409246450\n-21985231\n-345611555\n42838828\n378139029\n771527508\n349544948\n-920338578\n-12792527\n-462658011\n-61926512\n523660189\n561789695\n-693213416\n-946119159\n484679300\n392500607\n-519083157\n788416640\n737345068\n-776590383\n44017963\n868508151\n363123776\n-334242964\n-11296818\n-946596965\n482601955\n-161698456\n841325688\n921484946\n-461596164\n604666841\n535957661\n-913028513\n-120624442\n-317455348\n817807537\n788912137\n475228559\n467686498\n409802444\n362598957\n-564941309\n997085249\n989860980\n-169343871\n-953629044\n967577278\n-881885160\n-680300439\n-813563067\n-733108042\n707283170\n779230623\n966779933\n602039307\n-675333337\n-935858339\n578062789\n78254273\n752552925\n-728691777\n-230478620\n199311426\n-454373960\n-418318410\n-23078014\n615337387\n-512802065\n-871968819\n627401929\n392492511\n-655152629\n938884791\n-80177241\n873819407\n-564909806\n-620927477\n635397059\n-524827340\n882697074\n465667820\n841619650\n-580346661\n-222628175\n-854761926\n-86639765\n-367639111\n-807107580\n390079617\n-406472794\n-649789073\n889857309\n548653233\n-286914609\n867416277\n-808133366\n329563491\n406246202\n722381779\n-861518260\n176287988\n-862239966\n-654480028\n-641612084\n881558024\n649007293\n589108916\n-953082880\n995494547\n24736230\n-929547683\n-732924169\n-497330613\n-836279989\n-284326930\n-738619357\n420408786\n382246250\n-917885849\n-153492008\n-819339831\n961067172\n-923054352\n-559649558\n-258768868\n-681000723\n301665627\n-321719000\n25568724\n29793446\n167735749\n-718316490\n200794582\n850708815\n-290089443\n-952411233\n-39509715\n-674354504\n335518716\n-436018632\n989517765\n504692565\n-399487117\n794367328\n-181173125\n-51921851\n-979210497\n516826107\n-481993188\n-758215654\n-369556902\n-827166212\n419584172\n-592139366\n-854125586\n432434871\n641194027\n268049721\n-516051981\n193784144\n-862122066\n765538781\n628741668\n-712834233\n-708840\n764406580\n927192284\n972353134\n-218451954\n468024070\n-359075893\n-766507003\n-135822490\n-200494091\n-509366716\n883883355\n-923860236\n366717092\n-70923068\n-357601213\n396119640\n176462358\n-79087023\n-130239490\n-856293559\n502534659\n-160191260\n402965096\n-736075588\n223861429\n-159333763\n-217468354\n-180479906\n861591647\n81557986\n443482494\n-512483501\n39685388\n-934635876\n-350838040\n248134960\n-215991176\n-975869377\n274928634\n-866278128\n195607942\n-421803785\n-619717170\n-497809662\n-297721944\n-382836720\n-682768050\n662971796\n-932690333\n697174947\n541534775\n332246017\n394304097\n-272597785\n972108781\n-30325531\n-934596600\n870800183\n230599954\n-721577379\n-917875666\n579180164\n-469376925\n829919181\n338366380\n180029982\n-247572571\n664085667\n608270388\n971229974\n231950749\n506397716\n341698329\n345522003\n185501511\n-629381489\n282738077\n-609472094\n-107509090\n-931066278\n-486146570\n302853423\n314215549\n151422648\n-14698181\n-278730084\n985774544\n-130597019\n-422832521\n-729813946\n236579820\n997782721\n-172628998\n-332183711\n238830001\n161869142\n-534132577\n-891598601\n-163819663\n-450062009\n-961801951\n-955517263\n883008759\n-738293326\n-542439138\n-913532273\n564142317\n192598892\n544700393\n-150303432\n-916034174\n-683118497\n-932023639\n-982600877\n-630715731\n-667030747\n-980665264\n-872649236\n490578136\n749989497\n-862553233\n522892444\n543201362\n425286315\n754497567\n-257348388\n-429313480\n-133625862\n211010706\n754413123\n470884951\n479110840\n-854809792\n-329597136\n761723086\n922865213\n-885768812\n-966803702\n731915913\n317398353\n-42281699\n-18449358\n-900252513\n-142757142\n-787073317\n-48994721\n972423179\n958794361\n-467483183\n445786270\n-447625915\n-820559386\n-208640890\n6335899\n-946265632\n-391135255\n-569808740\n794551018\n758621058\n326688145\n-675053786\n-679895623\n-452271496\n558055686\n973806731\n589832708\n326787382\n992822473\n212345099\n-440763843\n693651427\n-696207396\n273666509\n-603976533\n-85412184\n936961933\n-185396942\n-174653819\n-3611906\n-782783448\n-963610436\n714046400\n632203942\n-504453584\n-292969354\n37048471\n-303626955\n-844108835\n-867239185\n-924491528\n-944462826\n-156145871\n-325658685\n383275986\n-938465720\n267009753\n-814924981\n-476523\n373991105\n-223154456\n889967895\n259788488\n223842043\n-485154265\n-199345618\n-534333828\n20943136\n-403052778\n995845017\n-527365421\n-972641000\n-738787458\n-257381074\n-978667082\n-939932576\n821838234\n-186640088\n406627829\n693935827\n-211263890\n-981268514\n-274053751\n124008336\n941944140\n-201306126\n875146568\n265848651\n-854729825\n452881742\n694371404\n667027808\n664710294\n368958142\n-912817717\n-872743364\n-943947513\n-85214868\n-41715349\n910260504\n-132231922\n16640169\n291424851\n-639749472\n-25776797\n354048093\n-397908208\n-586196520\n243039374\n41840802\n784185223\n486879900\n870762808\n-397561671\n943083545\n-378679114\n474639288\n-846256611\n-457688418\n-289839194\n-893959937\n389868987\n348436090\n-229562161\n569852310\n-476312872\n221574890\n65510910\n-824267963\n-261668766\n-27462528\n-60745413\n-952961741\n883994073\n789493543\n-490499034\n165434973\n-732753076\n230745791\n-417978567\n-753787654\n-962604900\n-127305715\n-940461015\n-908174960\n-151337757\n-972581626\n-302415131\n195664310\n525573191\n501359604\n-581987822\n111666309\n-332073537\n-56959228\n256940144\n-403635331\n-205188666\n45806198\n858602738\n-760911696\n-584778209\n458272234\n-901942726\n-632879622\n-528324785\n83197428\n80296777\n721179301\n255786817\n-460249397\n-382540307\n4077947\n-388442897\n-416504421\n399864051\n831752272\n-917644241\n-387753646\n430318901\n-562175411\n238892701\n-931815605\n",
        "heapsort.lat": "// Program zaliczeniowy 3: \"tablice - heap sort\"\n// autor: Bolek Kulbabinski\n//   Wejscie: dlugosc tablicy n > 0 po czym n liczb calkowitych.\n//   Wyjscie: n liczb w kolejnosci niemalejacej\n\nvoid swap(int[] tab, int x, int y) {\n    int temp = tab[x];\n    tab[x] = tab[y];\n    tab[y] = temp;\n}\n\n// Poprawienie kopca typu max.\nvoid heapDown(int[] heap, int index, int heapSize) {\n    while (index * 2 < heapSize - 1) {\n        int left = index * 2 + 1;\n        int right = left + 1;\n        int max = left;\n        if (right < heapSize && heap[right] > heap[max]) {\n            max = right;\n        }\n        if (heap[max] > heap[index]) {\n            swap(heap, max, index);\n            index = max;\n        } else {\n            return;\n        }\n    }\n}\n\nint extractMax(int[] heap, int heapSize) {\n    int max = heap[0];\n    heap[0] = heap[heapSize - 1];\n    heapDown(heap, 0, heapSize - 1);\n    return max;\n}\n\nvoid heapSort(int[] heap) {\n    // Budowanie kopca.\n    int i = heap.length / 2;\n    while (i >= 0) {\n        heapDown(heap, i, heap.length);\n        i--;\n    }\n\n    // Sortowanie.\n    i = heap.length - 1;\n    while (i >= 0) {\n        heap[i] = extractMax(heap, i + 1);\n        i--;\n    }\n}\n\nint main() {\n    int n = readInt();\n    int[] tab = new int[n];\n\n    int i = 0;\n    while (i < n) {\n        tab[i] = readInt();\n        i++;\n    }\n\n    heapSort(tab);\n\n    for (int elem : tab) {\n        printInt(elem);\n    }\n\n    return 0;\n}\n\n",
        "heapsort.output": "-998871377\n-998145175\n-995131134\n-994201467\n-993366696\n-992660248\n-991503124\n-990775260\n-989595660\n-988558560\n-988434250\n-987144859\n-984814882\n-983289238\n-982600877\n-981268514\n-980665264\n-980469319\n-979651352\n-979210497\n-978667082\n-976235610\n-976057703\n-975869377\n-975553748\n-974396465\n-972641000\n-972581626\n-967508421\n-966803702\n-965192814\n-963610436\n-962604900\n-961801951\n-960613758\n-958053522\n-956807631\n-955517263\n-954325800\n-953629044\n-953082880\n-952961741\n-952411233\n-947100350\n-946596965\n-946265632\n-946119159\n-944613529\n-944498271\n-944462826\n-943947513\n-943623044\n-942712046\n-941706961\n-940796508\n-940461015\n-939932576\n-939577006\n-939023981\n-938972184\n-938465720\n-936404576\n-935858339\n-935721809\n-934635876\n-934596600\n-932690333\n-932023639\n-931815605\n-931066278\n-930768203\n-929936663\n-929547683\n-929018086\n-927735612\n-926939259\n-926831679\n-925725932\n-925264522\n-924491528\n-923860236\n-923054352\n-920338578\n-919050407\n-919047642\n-917885849\n-917875666\n-917644241\n-917574409\n-916818979\n-916523291\n-916034174\n-915326903\n-913532273\n-913028513\n-913026787\n-912817717\n-910968710\n-910934238\n-908216683\n-908174960\n-901942726\n-901432892\n-900851477\n-900252513\n-898277607\n-897700271\n-895886374\n-895678560\n-895395884\n-893959937\n-892950492\n-891598601\n-887586491\n-885950266\n-885768812\n-885523680\n-881885160\n-878359833\n-876371965\n-875299819\n-874436826\n-872743364\n-872649236\n-871968819\n-871558033\n-869197040\n-867493961\n-867239185\n-866278128\n-862553233\n-862239966\n-862122066\n-861518260\n-860718304\n-860543211\n-859677462\n-856293559\n-855737404\n-854809792\n-854761926\n-854729825\n-854125586\n-853985873\n-850545343\n-849710558\n-846256611\n-844108835\n-839241721\n-838514197\n-836279989\n-835117818\n-832876654\n-832018275\n-829049898\n-828060088\n-827166212\n-824816791\n-824267963\n-820559386\n-819339831\n-814924981\n-813563067\n-808133366\n-807655633\n-807448386\n-807107580\n-800044378\n-795557469\n-787073317\n-782783448\n-776590383\n-766507003\n-765028743\n-763593314\n-760911696\n-758432829\n-758215654\n-753787654\n-753249210\n-751869986\n-751516341\n-748723861\n-747246115\n-744619150\n-742782801\n-742346475\n-738787458\n-738619357\n-738293326\n-736075588\n-733108042\n-732924169\n-732753076\n-731713799\n-729813946\n-728691777\n-721577379\n-718316490\n-713999570\n-712834233\n-701115581\n-696207396\n-693820476\n-693213416\n-692648454\n-690568972\n-688108571\n-687335425\n-684960450\n-683118497\n-682768050\n-681000723\n-680300439\n-679895623\n-678685200\n-676292718\n-675333337\n-675053786\n-674354504\n-672018383\n-670032773\n-669843566\n-667030747\n-662797920\n-659587871\n-655152629\n-654480028\n-654034172\n-650394827\n-649789073\n-649588469\n-641959518\n-641612084\n-639749472\n-637925457\n-632879622\n-630715731\n-630648881\n-629381489\n-628019701\n-624774251\n-620927477\n-620637834\n-619717170\n-617819008\n-615824543\n-613820200\n-610925752\n-609472094\n-608882506\n-607820950\n-603976533\n-600528798\n-595061282\n-592139366\n-591153415\n-590425943\n-589783505\n-587897960\n-586196520\n-584778209\n-583463898\n-581987822\n-580346661\n-578707343\n-578654996\n-577740363\n-574324117\n-571976350\n-570643917\n-569808740\n-564941309\n-564909806\n-562175411\n-561454864\n-559649558\n-558179585\n-557575348\n-550587269\n-549235275\n-542739297\n-542439138\n-541527545\n-540649406\n-538486225\n-536148240\n-535775752\n-534333828\n-534132577\n-529924918\n-528324785\n-527365421\n-526117178\n-525748286\n-524827340\n-521436559\n-519083157\n-516051981\n-512802065\n-512483501\n-509366716\n-508562417\n-504453584\n-502231031\n-497809662\n-497330613\n-491853721\n-490499034\n-488452261\n-487577358\n-486223185\n-486146570\n-485838698\n-485154265\n-482713863\n-481993188\n-481461332\n-480494226\n-477713501\n-476312872\n-474572962\n-474034528\n-469376925\n-467483183\n-466424875\n-462658011\n-461596164\n-460249397\n-458703274\n-457688418\n-454373960\n-453830252\n-452271496\n-452011124\n-450172937\n-450062009\n-447625915\n-446104306\n-440763843\n-439278769\n-437756790\n-436018632\n-435775295\n-432842313\n-429313480\n-426052093\n-424945650\n-422832521\n-421921978\n-421803785\n-420216582\n-420006995\n-418318410\n-417978567\n-416504421\n-411558344\n-409246450\n-409108290\n-408427659\n-406472794\n-403635331\n-403052778\n-399487117\n-398865491\n-397908208\n-397561671\n-393118706\n-391135255\n-388442897\n-387753646\n-382836720\n-382540307\n-378679114\n-370293566\n-369556902\n-367639111\n-366820456\n-361828895\n-359828965\n-359075893\n-357601213\n-357366939\n-357296057\n-355908108\n-352394136\n-351004878\n-350838040\n-348807002\n-345611555\n-334242964\n-332183711\n-332073537\n-329597136\n-327822994\n-325658685\n-323376178\n-321719000\n-317455348\n-309141065\n-306416330\n-303626955\n-302415131\n-301219213\n-297721944\n-297103836\n-295112771\n-294387077\n-292969354\n-291049727\n-290089443\n-289839194\n-288598987\n-287081430\n-286914609\n-284326930\n-279210706\n-278730084\n-274210728\n-274053751\n-274019293\n-272597785\n-263105848\n-261668766\n-259174976\n-258768868\n-257381074\n-257348388\n-254637534\n-251838517\n-247572571\n-245322239\n-243963443\n-240086228\n-237619899\n-236573641\n-234345706\n-231112566\n-230478620\n-229562161\n-224269578\n-224023938\n-223282043\n-223154456\n-222628175\n-221438089\n-218451954\n-217468354\n-215991176\n-214482705\n-212651311\n-211263890\n-208640890\n-205188666\n-201306126\n-200494091\n-199345618\n-198502750\n-196898788\n-186640088\n-185396942\n-182201528\n-181173125\n-180479906\n-178116655\n-174653819\n-172628998\n-171682634\n-169343871\n-169290055\n-168301873\n-168208744\n-166708404\n-166654810\n-166285254\n-163819663\n-161698456\n-160191260\n-159333763\n-156421896\n-156145871\n-153492008\n-151337757\n-150303432\n-142757142\n-142220478\n-141003148\n-135822490\n-135366748\n-133625862\n-132231922\n-130597019\n-130239490\n-128540834\n-127305715\n-122080376\n-121772125\n-121707471\n-121495836\n-121388508\n-120624442\n-117985292\n-116631199\n-116513619\n-114931335\n-111176882\n-110505128\n-107509090\n-106370047\n-92529886\n-91615560\n-86639765\n-85412184\n-85214868\n-80177241\n-79087023\n-79071756\n-73119368\n-70923068\n-69297669\n-63478932\n-61926512\n-60745413\n-56959228\n-56044354\n-54406154\n-51921851\n-51880670\n-50202427\n-49143532\n-48994721\n-43592365\n-42281699\n-41715349\n-40737413\n-39509715\n-36248393\n-33558557\n-32726624\n-31948652\n-30325531\n-29768839\n-27789277\n-27462528\n-25776797\n-23078014\n-21985231\n-18449358\n-14698181\n-12792527\n-11296818\n-5875142\n-5382579\n-3611906\n-708840\n-476523\n1861260\n4077947\n4658025\n6335899\n6505359\n6896918\n13488289\n14301503\n16640169\n20943136\n24052274\n24736230\n25228580\n25568724\n26087364\n29793446\n32482240\n34853111\n36516199\n37048471\n38595464\n39685388\n41840802\n42838828\n44017963\n45806198\n48970676\n53670109\n55762323\n65510910\n66537424\n67125123\n69411223\n78254273\n79513323\n80296777\n81557986\n83197428\n86124595\n87964755\n90665489\n91866941\n93857828\n104786703\n106646937\n109272717\n111666309\n112032020\n123376333\n123597890\n124008336\n126352979\n129847358\n136379059\n138746227\n143541526\n151422648\n152586242\n153659982\n156641338\n157185059\n161869142\n165434973\n166561680\n167735749\n170237497\n175741926\n176287988\n176462358\n176996870\n178807407\n180029982\n185501511\n191796757\n192598892\n193784144\n195607942\n195664310\n197379381\n199311426\n200794582\n201941013\n205810432\n208428617\n211010706\n211139377\n212345099\n214473354\n216781922\n219308561\n221574890\n223842043\n223861429\n224986696\n227371094\n228370542\n228632661\n230599954\n230745791\n231950749\n236579820\n238830001\n238892701\n240963249\n241015012\n242740250\n243039374\n245218171\n248134960\n255458515\n255786817\n256940144\n259788488\n261139920\n262048950\n265848651\n267009753\n268049721\n273114732\n273666509\n274928634\n275350167\n278466214\n281999239\n282738077\n286599887\n291424851\n291898069\n294139132\n299110912\n301665627\n302853423\n303523404\n303783218\n304226289\n306916240\n307990087\n309827122\n312622060\n314215549\n314521573\n317398353\n322526995\n326688145\n326787382\n329503155\n329563491\n332246017\n335518716\n338366380\n341698329\n344803893\n345522003\n348436090\n349544948\n354048093\n355452283\n356893309\n362598957\n363123776\n366717092\n368958142\n369531972\n373991105\n378127020\n378139029\n379421800\n382246250\n383275986\n389868987\n390079617\n390991885\n392492511\n392500607\n394304097\n396119640\n399864051\n402747840\n402965096\n406246202\n406627829\n407175851\n409438767\n409802444\n419584172\n420408786\n425286315\n428595769\n430318901\n432434871\n434919505\n435362155\n436743181\n438569805\n443482494\n444119684\n445365533\n445506207\n445786270\n447932334\n451593175\n451913256\n452502514\n452881742\n454068655\n456517203\n458272234\n463400783\n464429830\n465667820\n466566965\n467686498\n468024070\n470884951\n474639288\n475228559\n475339917\n475362642\n476036856\n479110840\n482597500\n482601955\n484146355\n484679300\n486029159\n486879900\n490578136\n501062917\n501359604\n501980836\n502534659\n504617275\n504692565\n506397716\n512262305\n513619244\n514956622\n516826107\n518005154\n519860951\n522892444\n523660189\n525573191\n526372853\n527785302\n527873145\n533087562\n535957661\n536006164\n540970508\n541534775\n541916123\n543201362\n544700393\n548653233\n548918609\n549378209\n550771842\n554256918\n556647045\n558055686\n561789695\n562510240\n563955042\n564142317\n565672250\n569692245\n569852310\n573735832\n573867522\n578062789\n579180164\n589001107\n589108916\n589832708\n597668860\n600841933\n602039307\n604666841\n607198956\n607770463\n608270388\n612144848\n615337387\n618840349\n619973967\n623264485\n627401929\n628741668\n630025053\n631749371\n632203942\n633107615\n635397059\n639160596\n641194027\n649007293\n658525347\n662971796\n664085667\n664710294\n667027808\n671270479\n671814709\n674412690\n675238315\n679226278\n679445874\n679568164\n682923555\n684367342\n686820023\n687471147\n692730559\n693651427\n693935827\n694371404\n695720050\n697174947\n697514235\n703143942\n707283170\n714046400\n718117131\n721179301\n722381779\n731915913\n737345068\n746781517\n746846766\n747866727\n749989497\n752552925\n754413123\n754497567\n755444179\n758621058\n761723086\n763137349\n764406580\n765538781\n769502973\n770993461\n771527508\n775016430\n779230623\n784185223\n784315430\n786023524\n788416640\n788912137\n789493543\n791421809\n791888230\n792348074\n794367328\n794551018\n807429072\n812518563\n812609432\n813207880\n817807537\n820044860\n821838234\n824747226\n827910106\n829919181\n831752272\n837167981\n839508535\n841325688\n841619650\n845547423\n850708815\n854533224\n856223235\n858602738\n859725663\n861591647\n867416277\n868508151\n870751747\n870762808\n870800183\n871174513\n873819407\n874044710\n875146568\n877313533\n881558024\n882697074\n883008759\n883883355\n883994073\n885476600\n889857309\n889967895\n890035085\n893096833\n908894585\n910260504\n921097561\n921164136\n921484946\n922865213\n927192284\n931581207\n932219603\n934847964\n936961933\n938884791\n941944140\n943083545\n943998717\n944581269\n948728898\n958794361\n960808502\n961067172\n966779933\n967577278\n968105313\n969079590\n969524863\n971229974\n972108781\n972353134\n972423179\n972728275\n973806731\n977076180\n982465678\n985774544\n988926037\n989517765\n989715046\n989860980\n992822473\n993414272\n995494547\n995845017\n997085249\n997782721\n999800722\n"
      },
      "basic": {
        "add.lat": "// Author: Tomasz Wysocki 277696\n\nint main() {\n    printInt(1 + 1);\n    return 0;\n}\n",
        "add.output": "2\n",
        "bool_operations.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    b(t(1) && f(2));\n    b(t(3) && t(4));\n    b(t(5) || t(6));\n    b(f(7) && t(8));\n    b(t(9) && t(10) && t(11));\n    b(f(12) || f(13) && t(14));\n    return 0;\n}\n\nboolean f(int a) {\n    printInt(a);\n    return false;\n}\nboolean t(int a) {\n    return !f(a);\n}\nvoid b(boolean a) {\n    if(a)\n        printString(\"true\");\n    else\n        printString(\"false\");\n}\n",
        "bool_operations.output": "1\n2\nfalse\n3\n4\ntrue\n5\ntrue\n7\nfalse\n9\n10\n11\ntrue\n12\n13\nfalse\n",
        "bool_overoptymization.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    print() && false;\n    return 0;\n}\n\nboolean print() {\n    printString(\"ahoj\");\n    return true;\n}\n",
        "bool_overoptymization.output": "ahoj\n",
        "compare.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    if(1 <= 1)\n        printString(\"4\");\n    if(1 >= 1)\n        printString(\"4\");\n    if(1 > 1)\n        printString(\"5\");\n    if(1 < 1)\n        printString(\"5\");\n    if(1 < 2)\n        printString(\"6\");\n    if(2 > 1)\n        printString(\"6\");\n    if(1 > 2)\n        printString(\"7\");\n    if(2 < 1)\n        printString(\"7\");\n    return 0;\n}\n",
        "compare.output": "4\n4\n6\n6\n",
        "concatenation.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    printString(\"a\" + \"b\");\n    return 0;\n}\n",
        "concatenation.output": "ab\n",
        "empty_if.lat": "// Author: Tomasz Wysocki 277696\n\nint main() {\n    if(false);\n    printInt(1);\n    return 0;\n}\n",
        "empty_if.output": "1\n",
        "empty_instructions.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    ;;;;;\n    return 0;\n}\n",
        "empty_instructions.output": "",
        "empty_while.lat": "// Author: Tomasz Wysocki 277696\n\nint main() {\n    while(false);\n    printInt(1);\n    return 0;\n}\n",
        "empty_while.output": "1\n",
        "escaped_string.lat": "// Autor: Bolek Kulbabinski\n\nint f(int p){\n    int c = p + 2*p;\n    printString(\"\\\"\\npop\\npowrot:\\ngetstatic java/lang/System/out Ljava/io/PrintStream;\\nldc \\\"zle \\\"\\ninvokevirtual java/io/PrintStream/print(Ljava/lang/String;)V\\ngoto powrot\\nldc \\\"\");\n    return c;\n}\n\nint main() {\n    return f(1) - 3;\n}\n\n",
        "escaped_string.output": "\"\npop\npowrot:\ngetstatic java/lang/System/out Ljava/io/PrintStream;\nldc \"zle \"\ninvokevirtual java/io/PrintStream/print(Ljava/lang/String;)V\ngoto powrot\nldc \"\n",
        "fibonacci.input": "23\n",
        "fibonacci.lat": "/**\n * Iterative fibonacci.\n *\n * @param n a non-negative index in Fibonacci sequence.\n * @return value of `n`'th Fibonacci number\n *\n * @author cbart@students.mimuw.edu.pl (Cezary Bartoszuk)\n */\nint fibonacci(int n) {\n    if (n <= 1) {\n        return n;\n    }\n    int fib_a = 0;\n    int fib_b = 1;\n    int tmp;\n    int i = 2;\n    while (i <= n) {\n        tmp = fib_b + fib_a;\n        fib_a = fib_b;\n        fib_b = tmp;\n        i++;\n    }\n    return fib_b;\n}\n\n\nint main() {\n    int i = readInt();\n    if (i >= 0) {\n        printInt(fibonacci(i));\n        return 0;\n    } else {\n        printString(\"Expected a non-negative integer, but got:\");\n        printInt(i);\n        return 1;\n    }\n}\n",
        "fibonacci.output": "28657\n",
        "fibonacci.s": ".cstring\n\n#---Format strings start\nPRINT_INT_FORMAT:\n  .ascii \"%ld\\12\\0\"\nREAD_INT_FORMAT:\n  .ascii \"%ld\\0\"\nNEW_LINE_FORMAT:\n  .ascii \"\\12\\0\"\nERROR_STRING:\n  .ascii \"runtime error\\0\"\n#---Format strings end\n\n\n.text\n\n.globl error\nerror:\n#---Error function body start\n  leaq ERROR_STRING(%rip), %rdi\n  call _puts\n  ret\n#---Error function body end\n\n.globl printInt\nprintInt:\n#---PrintInt function body start\n  pushq %rbp\n  movq %rsp, %rbp\n  movq  16(%rbp), %rsi\n  xorq %rax, %rax\n  leaq PRINT_INT_FORMAT(%rip), %rdi\n  call _printf\n  xorq %rax, %rax\n  popq %rbp\n  retq\n#---PrintInt function body end\n\n.globl printString\nprintString:\n#---PrintString function body start\n  pushq %rbp\n  movq %rsp, %rbp\n  movq  16(%rbp), %rdi\n  xorq %rax, %rax\n  call _puts\n  popq %rbp\n  retq\n#---PrintString function body end\n\n.globl readInt\nreadInt:\n#---ReadInt function body start\n  pushq %rbp\n  movq %rsp, %rbp\n  subq  $16, %rsp\n  movq %rsp, %rsi\n  xorq %rax, %rax\n  leaq READ_INT_FORMAT(%rip), %rdi\n  call _scanf\n  movq (%rsp), %rax\n  addq  $16, %rsp\n  popq %rbp\n  retq\n#---ReadInt function body end\n\n.globl readString\nreadString:\n#---ReadInt function body start\n  pushq %rbp\n  pushq %rbx\n  pushq %r15\n  movq %rsp, %rbp\n  subq  $16, %rsp\n  leaq -24(%rbp), %rbx\n  movq $0, %r15\n  xorq %rax, %rax\n  leaq NEW_LINE_FORMAT(%rip), %rdi\n  call _scanf\n  .L0:\n  callq _getchar\n  movzbl %al, %ecx\n  cmpl  $10, %ecx\n  je .L1\n#---Every 16th char sub 16 from stack start\n  movq %r15, %rax\n  movq $16, %r9\n  cqto\n  idivq %r9\n  cmpq  $0, %rdx\n  jne .L2\n  subq $16, %rsp\n#---Every 16th char sub 16 from stack end\n  .L2:\n  movb  %cl, (%rbx)\n  incq  %r15\n  incq  %rbx\n  jmp .L0\n  .L1:\n#---Alloc result string start\n  movq %r15, %rdi\n  call _malloc\n  movq %rax, %rbx\n#---Alloc result string end\n#---Memcpy result string start\n  leaq  -24(%rbp), %rsi #String to src arg\n  movq %rbx, %rdi #Result string to dest arg\n  movq %r15, %rdx #Left string length\n  call _memcpy\n#---Memcpy result string end\n#---Clear stack start\n  leaq 15(%r15), %rax\n  movq $16, %r9\n  cqto\n  idivq %r9\n  imulq $16, %rax\n  addq %rax, %rsp\n#---Clear stack end\n  movq %rbx, %rax\n  addq  $16, %rsp\n  popq %r15\n  popq %rbx\n  popq %rbp\n  retq\n#---ReadInt function body end\n\n.globl fibonacci\nfibonacci:\n#---fibonacci function body start\n   #Stack size: 64\n   #Local: 32\n   #Shift: 0\n   #Spill: 0\n   #Registers: 24\n   #Calls: 0\n   #Args: 8\n  pushq %rbp\n  movq %rsp, %rbp\n  subq $64, %rsp\n#---Registers to local memory start\n  movq %r12, -48(%rbp)\n  movq %r13, -56(%rbp)\n  movq %r14, -64(%rbp)\n#---Registers to local memory end\n#---Args to local memory start\n  movq 16(%rbp), %rax\n  movq %rax, -8(%rbp)\n#---Args to local memory end\n  movq $1, %rax\n  movq %rax, %r12\n  movq -8(%rbp), %rax\n#---Comparison start\n  cmpq %r12, %rax\n  jle .L6\n  movq $0, %rax\n  jmp .L7\n.L6: #right label\n  movq $1, %rax\n.L7: #end label\n#---Comparison end\n  movq %rax, %r12\n  movq %r12, %rax\n  cmpq  $1, %rax\n  je .L4\n#---StatementBlock start\n#---StatementBlock end\n  jmp .L5\n.L4: #right label\n#---StatementBlock start\n  movq -8(%rbp), %rax\n  jmp .L3\n   #return n\n#---StatementBlock end\n.L5: #end label\n   #Declaring variable fib_a on -16(%rbp)\n  movq $0, %rax\n  movq %rax, -16(%rbp)\n   #Declaring variable fib_b on -24(%rbp)\n  movq $1, %rax\n  movq %rax, -24(%rbp)\n   #Declaring variable tmp on -32(%rbp)\n  movq $0, %rax\n  movq %rax, -32(%rbp)\n   #Declaring variable i on -40(%rbp)\n  movq $2, %rax\n  movq %rax, -40(%rbp)\n.L8: #start label\n  movq -8(%rbp), %rax\n  movq %rax, %r12\n  movq -40(%rbp), %rax\n#---Comparison start\n  cmpq %r12, %rax\n  jle .L10\n  movq $0, %rax\n  jmp .L11\n.L10: #right label\n  movq $1, %rax\n.L11: #end label\n#---Comparison end\n  movq %rax, %r12\n  movq %r12, %rax\n  cmpq  $0, %rax\n  je .L9\n#---StatementBlock start\n#---Operation fib_b + fib_a start\n  movq -16(%rbp), %rax\n  movq %rax, %r12\n  movq -24(%rbp), %rax\n  movq %rax, %r13\n   #Compiling operator\n  movq %r13, %rax\n  addq %r12, %rax\n  movq %rax, %r14\n  movq %r14, %rax\n#---Operation fib_b + fib_a end\n  movq %rax, %r12\n  movq %r12, -32(%rbp) #save fib_b + fib_a on tmp\n  movq -24(%rbp), %rax\n  movq %rax, %r12\n  movq %r12, -16(%rbp) #save fib_b on fib_a\n  movq -32(%rbp), %rax\n  movq %rax, %r12\n  movq %r12, -24(%rbp) #save tmp on fib_b\n  movq -40(%rbp), %rax\n  incq %rax\n  movq %rax, -40(%rbp)\n#---StatementBlock end\n  jmp .L8\n.L9: #end label\n  movq -24(%rbp), %rax\n  jmp .L3\n   #return fib_b\n  .L3:\n#---Registers from local memory start\n  movq -48(%rbp), %r12\n  movq -56(%rbp), %r13\n  movq -64(%rbp), %r14\n#---Registers from local memory end\n  addq $64, %rsp\n  popq %rbp\n  retq\n#---fibonacci function body end\n\n.globl _main\n_main:\n#---_main function body start\n   #Stack size: 24\n   #Local: 8\n   #Shift: 16\n   #Spill: 0\n   #Registers: 8\n   #Calls: 8\n   #Args: 0\n  pushq %rbp\n  movq %rsp, %rbp\n  subq $48, %rsp\n#---Registers to local memory start\n  movq %r12, -16(%rbp)\n#---Registers to local memory end\n#---Args to local memory start\n#---Args to local memory end\n   #Declaring variable i on -8(%rbp)\n   #readInt calling with \n  callq readInt\n  movq %rax, %r12\n   #readInt call end\n  movq %r12, %rax\n  movq %rax, -8(%rbp)\n  movq $0, %rax\n  movq %rax, %r12\n  movq -8(%rbp), %rax\n#---Comparison start\n  cmpq %r12, %rax\n  jge .L15\n  movq $0, %rax\n  jmp .L16\n.L15: #right label\n  movq $1, %rax\n.L16: #end label\n#---Comparison end\n  movq %rax, %r12\n  movq %r12, %rax\n  cmpq  $1, %rax\n  je .L13\n#---StatementBlock start\n   #printString calling with \"Expected a non-negative integer, but got:\"\n#---Allocating string start\n  movq $42, %rdi\n  call _malloc\n  movb $69, 0(%rax)\n  movb $120, 1(%rax)\n  movb $112, 2(%rax)\n  movb $101, 3(%rax)\n  movb $99, 4(%rax)\n  movb $116, 5(%rax)\n  movb $101, 6(%rax)\n  movb $100, 7(%rax)\n  movb $32, 8(%rax)\n  movb $97, 9(%rax)\n  movb $32, 10(%rax)\n  movb $110, 11(%rax)\n  movb $111, 12(%rax)\n  movb $110, 13(%rax)\n  movb $45, 14(%rax)\n  movb $110, 15(%rax)\n  movb $101, 16(%rax)\n  movb $103, 17(%rax)\n  movb $97, 18(%rax)\n  movb $116, 19(%rax)\n  movb $105, 20(%rax)\n  movb $118, 21(%rax)\n  movb $101, 22(%rax)\n  movb $32, 23(%rax)\n  movb $105, 24(%rax)\n  movb $110, 25(%rax)\n  movb $116, 26(%rax)\n  movb $101, 27(%rax)\n  movb $103, 28(%rax)\n  movb $101, 29(%rax)\n  movb $114, 30(%rax)\n  movb $44, 31(%rax)\n  movb $32, 32(%rax)\n  movb $98, 33(%rax)\n  movb $117, 34(%rax)\n  movb $116, 35(%rax)\n  movb $32, 36(%rax)\n  movb $103, 37(%rax)\n  movb $111, 38(%rax)\n  movb $116, 39(%rax)\n  movb $58, 40(%rax)\n  movb $0, 41(%rax)\n#---Allocating string end\n  movq %rax, 0(%rsp)\n  callq printString\n  movq %rax, %r12\n   #printString call end\n#---Freeing value \"Expected a non-negative integer, but got:\" under register 0(%rsp) start\n  movq 0(%rsp), %rdi\n  call _free\n#---Freeing value \"Expected a non-negative integer, but got:\" under register 0(%rsp) end\n  movq %r12, %rax\n   #printInt calling with i\n  movq -8(%rbp), %rax\n  movq %rax, 0(%rsp)\n  callq printInt\n  movq %rax, %r12\n   #printInt call end\n  movq %r12, %rax\n  movq $1, %rax\n  jmp .L12\n   #return 1\n#---StatementBlock end\n  jmp .L14\n.L13: #right label\n#---StatementBlock start\n   #printInt calling with fibonacci(i)\n   #fibonacci calling with i\n  movq -8(%rbp), %rax\n  movq %rax, 0(%rsp)\n  callq fibonacci\n  movq %rax, %r12\n   #fibonacci call end\n  movq %r12, %rax\n  movq %rax, 0(%rsp)\n  callq printInt\n  movq %rax, %r12\n   #printInt call end\n  movq %r12, %rax\n  movq $0, %rax\n  jmp .L12\n   #return 0\n#---StatementBlock end\n.L14: #end label\n  .L12:\n#---Registers from local memory start\n  movq -16(%rbp), %r12\n#---Registers from local memory end\n  addq $48, %rsp\n  popq %rbp\n  retq\n#---_main function body end\n\n",
        "fine_ident.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    int abcABC000___ = 0;\n    return abcABC000___;\n}\n",
        "fine_ident.output": "",
        "mod.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    printInt(5 % 3);\n    printInt(-5 % 3); // -2 - sic!\n    return 0;\n}\n",
        "mod.output": "2\n-2\n",
        "negation.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    printInt(- -1);\n    int i = 1;\n    printInt(-i);\n    printInt(2 - -i);\n    return 0;\n}\n",
        "negation.output": "1\n-1\n3\n",
        "print_complicated_string.lat": "// Autor: Tomasz Wysocki 277696\nint main() {\n    printString(\"\\\\a\\\\n\\n\\tb\\\"\");\n    return 0;\n}\n",
        "print_complicated_string.output": "\\a\\n\n\tb\"\n",
        "print_int.lat": "// Autor: Tomasz Wysocki 277696\nint main() {\n    printInt(1);\n    return 0;\n}\n",
        "print_int.output": "1\n",
        "print_string.lat": "// Autor: Tomasz Wysocki 277696\nint main() {\n    printString(\"abc\");\n    return 0;\n}\n",
        "print_string.output": "abc\n",
        "scopes.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    int i = 0;\n    printInt(i);\n    {\n        int i = 1;\n        printInt(i);\n    }\n    printInt(i);\n    {\n        int i = 2;\n        printInt(i);\n    }\n    printInt(i);\n    return 0;\n}\n",
        "scopes.output": "0\n1\n0\n2\n0\n",
        "void_return.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    run();\n    return 0;\n}\n\nvoid run() {\n    printInt(0);\n    if(true)\n        return;\n}\n",
        "void_return.output": "0\n",
        "while_true.lat": "// Author: Tomasz Wysocki 277696\nint main() {\n    while(true) {\n        return 0;\n    }\n}\n",
        "while_true.output": "",
        "while_true2.input": "0\n1\n",
        "while_true2.lat": "// Author: Tomasz Biczel 277568, Tomasz Wysocki 277696\nint main() {\n    while (true) {\n        int x;\n        x = readInt();\n        if (x == 1)\n            return 0;\n        else\n            printString(\"jeszcze raz\");\n    }\n\n    return 0;\n}\n",
        "while_true2.output": "jeszcze raz\n"
      },
      "hardcore": {
        "big_string.lat": "// Author: Tomasz Wysocki 277696\n//\n// Zajmuje około 15Gb pamięci, jeśli nie masz żadnego odśmiecania.\n//\n// UWAGA: Jeśli masz swap, może porządnie zamulić komputer.\nint main() {\n    string s1 = \"\";\n    string s2 = \"\";\n    int i = 0;\n    while(i < 1024 * 100) {\n        s1 = s1 + \"a\";\n        if(i % 2 == 0)\n            s2 = s2 + \"a\";\n        i++;\n    }\n    printString(\"Done\");\n    return 0;\n}\n",
        "big_string.output": "Done\n",
        "tail_call_optymization.lat": "// Author: Tomasz Wysocki 277696\n\n// 1000000 stopni rekursji powinno wysypać każdy program.\n// Aby przejść ten test trzeba mieć optymalizację, która\n// zamienia rekurencję ogonową na pętlę.\nint main() {\n    printInt(sum(1000000, 0));\n    return 0;\n}\nint sum(int z, int a) {\n    if(z == 0)\n        return a;\n    int y = z;\n    if(y % 2 == 1)\n        y = -1 * z;\n    return sum(z-1, a+y);\n}\n",
        "tail_call_optymization.output": "500000\n"
      },
      "virtual": {
        "polymorphism.input": "",
        "polymorphism.lat": "// autor: Bolek Kulbabinski\n\nclass A {\n    void print() {\n        printString(\"A\");\n    }\n}\n\nclass B extends A {\n    void print() {\n        printString(\"B\");\n    }\n}\n\nclass C extends B {\n    void print() {\n        printString(\"C\");\n    }\n}\n\nclass D extends C {\n    void print() {\n        printString(\"D\");\n    }\n}\n\n\n\nB fun(){\n    // Return z podtypem.\n    return new C;\n}\n\nA fun2(B param){\n    return param;\n}\n\nint main(){\n    // Inicjalizacja podtypem.\n    A z1 = new B;\n    z1.print();\n    A z2 = fun();\n    z2.print();\n\n    // Przypisanie podtypu.\n    z2 = new B;\n    z2.print();\n\n    // Przekazanie podtypu jako parametr.\n    A z3 = fun2(new C);\n    z3.print();\n\n    // Nadtyp w for-each (dla tablic obiektow).\n    C[] tab;\n    tab  = new C[3];\n    tab[0] = new C;\n    tab[1] = new D;\n    tab[2] = new D;\n    for (B elem : tab) {\n        fun2(elem).print();\n    }\n\n    // Porownywanie z podtypem.\n    B t1 = new B;\n    A t2 = t1;\n\n    if (t1 == t2) {\n        printString(\"tak\");\n    }\n    if (t1 != t2) {\n        printString(\"nie\");\n    }\n\n    return 0;\n}\n",
        "polymorphism.output": "B\nC\nB\nC\nC\nD\nD\ntak\n"
      }
    }
  }
}
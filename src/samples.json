{
  "bad": {
    "bad001.lat": "/*\n",
    "bad002.lat": "a\n",
    "bad003.lat": "// Repeated argument name\nint f(int x, int x) {\n   return x;\n}",
    "bad004.lat": "int main() {\n        return 0;\n        return 1;\n}\n",
    "bad005.lat": "foo() {}\n",
    "bad006.lat": "int main() {\n        x = 14;\n\treturn 0 ;\n}\n",
    "bad007.lat": "int main() {\n        int x;\n        int x;\n\treturn 0 ;\n}\n",
    "bad008.lat": "  int main() { \n    if (false)\n       return 0; \n}\n",
    "bad009.lat": "int main() {\n        int x;\n        x = true;\n        return 1;\n}\n",
    "bad010.lat": "int main() {\n        if (true)\n                return;\n\t;\n        return 1;\n}\n",
    "bad011.lat": "int main() {\n     return true;\n}\n",
    "bad012.lat": "int main() {\n     int i = foo(true);\n     return 0 ;\n}\n\nint foo(boolean b) { b = true; }\n",
    "bad013.lat": "int main() {\n      string x ;\n      x = \"pi\" + 1 ;\n      return 0 ;\n}\n",
    "bad015.lat": "// passing string to printInt().\n\nint main() {\n\tprintInt(\"foo\");\n\treturn 0 ;\n}\n",
    "bad016.lat": "// passing integers to printString().\n\nint main() {\n\tprintString(1);\n\treturn 0 ;\n}\n",
    "bad017.lat": "// 0 instead of 1 argument\n\nint main() {\n\tint x = foo();\n\treturn 0 ;\n}\n\nint foo(int y) {\n return y;\n}\n\n",
    "bad018.lat": "// 1 instead of 2 arguments\n\nint main() {\n\tint x = foo(1);\n\treturn 0 ;\n}\n\nint foo(int y,int z) {\n return y;\n}\n\n",
    "bad019.lat": "// 2 instead of 1 arguments\n\nint main() {\n\tint x = foo(1,2);\n\treturn 0 ;\n}\n\nint foo(int y) {\n return y;\n}\n\n",
    "bad020.lat": "// Compare string with boolean.\n\nint main() {\n  if (\"true\" == true) {\n   printString(\"foo\");\n  }\n  return 0 ;\n}",
    "bad021.lat": "/* Testing that main must return. */\n\n/* All functions should return a value of their value type. This is not a valid Javalette program: */\n\nint main() {\n}\n",
    "bad022.lat": "// Assigning string to int variable.\n\nint main () {\n int x = \"\";\n return 0 ;\n}",
    "bad023.lat": "// Assigning int to string variable.\n\nint main () {\n string x = 1;\n return 0 ;\n}",
    "bad024.lat": "int main() {\n    if (false) \n       return 0;\n}\n",
    "bad025.lat": "int main() {\n   return f(3); \n}\n\nint f(int x) {\n    if (x<0) \n       return x;\n}\n",
    "bad026.lat": "// Assigning string to int variable.\n\nint main () {\n int x;\n  x = \"foo\"+\"bar\";\n return 0 ;\n}",
    "bad027.lat": "// Assigning int to string variable.\n\nint main () {\n string x;\n x = 1;\n return 0 ;\n}",
    "test": {
      "test.lat": ""
    }
  },
  "good": {
    "core001.lat": "int main() {\n\tprintInt(fac(10));\n\tprintInt(rfac(10));\n\tprintInt(mfac(10));\n        printInt(ifac(10));\n        string r ; // just to test blocks \n\t{\n\t  int n = 10;\n\t  int r = 1;\n\t  while (n>0) {\n\t    r = r * n;\n\t    n--;\n\t  }\n\t  printInt(r);\n\t}\n\tprintString (repStr(\"=\",60));\n\tprintString (\"hello */\");\n        printString (\"/* world\") ;\n        return 0 ;\n}\n\nint fac(int a) {\n\tint r;\n\tint n;\n\n\tr = 1;\n\tn = a;\n\twhile (n > 0) {\n\t  r = r * n;\n\t  n = n - 1;\n\t}\n\treturn r;\n}\n\nint rfac(int n) {\n\tif (n == 0)\n\t  return 1;\n\telse\n\t  return n * rfac(n-1);\n}\n\nint mfac(int n) {\n\tif (n == 0)\n\t  return 1;\n\telse\n\t  return n * nfac(n-1);\n}\n\nint nfac(int n) {\n\tif (n != 0)\n\t  return mfac(n-1) * n;\n\telse\n\t  return 1;\n}\n\nint ifac(int n) { return ifac2f(1,n); }\n\nint ifac2f(int l, int h) {\n        if (l == h)\n          return l;\n        if (l > h)\n          return 1;\n        int m;\n        m = (l + h) / 2;\n        return ifac2f(l,m) * ifac2f(m+1,h);\n}\n\nstring repStr(string s, int n) {\n  string r = \"\";\n  int i = 0;\n  while(i<n) {\n    r = r + s;\n    i++;\n  }\n return r;\n}",
    "core001.output": "3628800\n3628800\n3628800\n3628800\n3628800\n============================================================\nhello */\n/* world\n",
    "core002.lat": "/* void expression as statement */\n\nint main() {\n  foo();\n  return 0 ;\n\n}\n\nvoid foo() {\n   printString(\"foo\");\n   return;\n}\n",
    "core002.output": "foo\n",
    "core003.lat": "// Testing the return checker\n\nint f () {\n   if (true)\n     return 0;\n   else\n     {}\n}\n\nint g () {\n  if (false) \n      {}\n  else\n      return 0;\n}\n\nvoid p () {}\n  \n\nint main() {\n  p();\n  return 0;\n}\n",
    "core003.output": "",
    "core004.lat": "/* allow comparing booleans. */\n\nint main() {\n  if (true == true) { printInt(42); }\n  return 0 ;\n\n}",
    "core004.output": "42\n",
    "core005.lat": "/* usage of variable initialized in both branches. */\n\nint main () {\n  int x;\n  int y = 56;\n  if (y + 45 <= 2) {\n    x = 1;\n  } else {\n    x = 2;\n  }\n  printInt(x);\n  return 0 ;\n\n}",
    "core005.output": "2\n",
    "core006.lat": "// Declaration of multiple variables of the same type in one statement:\n\nint main () {\n  int x, y;\n  x = 45;\n  y = -36;\n  printInt(x);\n  printInt(y);\n  return 0 ;\n\n}",
    "core006.output": "45\n-36\n",
    "core007.lat": "// declaration and initialization in same statement\n\nint main() {\n int x = 7;\n printInt(x);\n return 0 ;\n\n}",
    "core007.output": "7\n",
    "core008.lat": "// multiple variables of the same type declared \n// and possibly initialized in the same statement\n\nint main() {\n int x, y = 7;\n x = -1234234;\n printInt(x);\n printInt(y);\n return 0 ;\n\n}",
    "core008.output": "-1234234\n7\n",
    "core009.lat": "// Calling functions which take zero parameters\n\nint main() {\n int x = foo();\n printInt(x);\n return 0 ;\n\n}\n\nint foo() {\n return 10;\n}\n\n",
    "core009.output": "10\n",
    "core010.lat": "// count function parameters as initialized\n\nint main() {\n  printInt(fac(5));\n  return 0 ;\n}\n\nint fac (int a) {\n  int r;\n  int n;\n  r = 1;\n  n = a;\n  while (n > 0)\n  {\n    r = r * n;\n    n = n - 1;\n  }\n  return r;\n}\n",
    "core010.output": "120\n",
    "core011.lat": "/* Test pushing -1. */\n\nint main() {\n  printInt(-1);\n  return 0 ;\n}",
    "core011.output": "-1\n",
    "core012.lat": "/* Test arithmetic and comparisons. */\n\nint main() {\n    int x = 56;\n    int y = -23;\n    printInt(x+y);\n    printInt(x-y);\n    printInt(x*y);\n    printInt(45/2);\n    printInt(78%3);\n    printBool(x-y > x+y);\n    printBool(x/y <= x*y);\n    printString(\"string\"+\" \"+\"concatenation\");\n    return 0 ;\n}\n\nvoid printBool(boolean b) {\n  if (b) {\n    printString(\"true\");\n    return;\n  } else {\n    printString(\"false\");\n    return;\n }\n}",
    "core012.output": "33\n79\n-1288\n22\n0\ntrue\nfalse\nstring concatenation\n",
    "core013.lat": "/* Test boolean operators. */\n\nint main() {\n  printString(\"&&\");\n  printBool(test(-1) && test(0));\n  printBool(test(-2) && test(1));\n  printBool(test(3) && test(-5));\n  printBool(test(234234) && test(21321));\n  printString(\"||\");\n  printBool(test(-1) || test(0));\n  printBool(test(-2) || test(1));\n  printBool(test(3) || test(-5));\n  printBool(test(234234) || test(21321));\n  printString(\"!\");\n  printBool(true);\n  printBool(false);\n  return 0 ;\n\n}\n\nvoid printBool(boolean b) {\n  if (!b) {\n    printString(\"false\");\n  } else {\n    printString(\"true\");\n }\n return;\n}\n\nboolean test(int i) {\n  printInt(i);\n  return i > 0;\n}",
    "core013.output": "&&\n-1\nfalse\n-2\nfalse\n3\n-5\nfalse\n234234\n21321\ntrue\n||\n-1\n0\nfalse\n-2\n1\ntrue\n3\ntrue\n234234\ntrue\n!\ntrue\nfalse\n",
    "core014.lat": "/* Fibonacci. */\n\nint main () {\n  int lo,hi,mx ;\n  lo = 1 ;\n  hi = lo ;\n  mx = 5000000 ;\n  printInt(lo) ;\n  while (hi < mx) {\n    printInt(hi) ;\n    hi = lo + hi ;\n    lo = hi - lo ;\n  }\n  return 0 ;\n\n}\n\n",
    "core014.output": "1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n610\n987\n1597\n2584\n4181\n6765\n10946\n17711\n28657\n46368\n75025\n121393\n196418\n317811\n514229\n832040\n1346269\n2178309\n3524578\n",
    "core015.lat": "/* parity of positive integers by recursion */\n\nint main () {\n  printInt(ev(17)) ;\n  return 0 ;\n}\n\nint ev (int y) {\n  if (y > 0)\n    return ev (y-2) ;\n  else\n    if (y < 0)\n      return 0 ;\n    else\n      return 1 ;\n}",
    "core015.output": "0\n",
    "core016.lat": "/* parity of positive integers by loop */\n\nint main () {\n  int y = 17;\n  while (y > 0)\n    y = y - 2;\n  if (y < 0) {\n    printInt(0);\n    return 0 ;\n    }\n  else {\n    printInt(1);\n    return 0 ;\n    }\n}\n",
    "core016.output": "0\n",
    "core017.lat": "/* Test boolean operators */\n\nint main () {\n  int x = 4;\n  if (3 <= x && 4 != 2 && true) {\n    printBool(true);\n  } else {\n    printString(\"apa\");\n  }\n\n  printBool(true == true || dontCallMe(1));\n  printBool(4 < -5 && dontCallMe(2));\n\n  printBool(4 == x && true == !false && true);\n\n  printBool(implies(false,false));\n  printBool(implies(false,true));\n  printBool(implies(true,false));\n  printBool(implies(true,true));\n  return 0 ;\n\n}\n\nboolean dontCallMe(int x) {\n  printInt(x);\n  return true;\n}\n\nvoid printBool(boolean b) {\n  if (b) {\n    printString(\"true\");\n  } else {\n    printString(\"false\");\n }\n return;\n}\n\nboolean implies(boolean x, boolean y) {\n  return !x || x == y;\n}\n",
    "core017.output": "true\ntrue\nfalse\ntrue\ntrue\ntrue\nfalse\ntrue\n",
    "core018.input": "-37\nfoo\nbar\n",
    "core018.lat": "/* test input */\n\nint main() {\n  int x = readInt();\n  string y = readString();\n  string z = readString();\n\n  printInt(x-5);\n  printString(y+z);  \n  return 0 ;\n}",
    "core018.output": "-42\nfoobar\n",
    "core019.lat": "int main() {\n  int i = 78;\n  {\n    int i = 1;\n    printInt(i);\n  }\n  printInt(i);\n  while (i > 76) {\n    i--;\n    printInt(i);\n   // this is a little tricky\n   // on the right hand side, i refers to the outer i\n   int i = i + 7;\n   printInt(i);\n  }\n  printInt(i);\n  if (i > 4) {\n    int i = 4;\n    printInt(i);\n  } else {\n    printString(\"foo\");\n  } \n  printInt(i);\n  return 0 ;\n\n}",
    "core019.output": "1\n78\n77\n84\n76\n83\n76\n4\n76\n",
    "core020.lat": "int main() {\n    p();\n    printInt(1);\n    return 0;\n}\n\nvoid p() {}\n",
    "core020.output": "1\n",
    "core021.lat": "int main() {\n    if (true) {\n      printInt(1);\n      return 0;\n    }\n}",
    "core021.output": "1\n",
    "core022.lat": "int main() {\n    int x;\n    printInt(x);\n    return 0;\n}\n",
    "core022.output": "0\n"
  },
  "extensions": {
    "arrays1": {
      "array001.lat": "int main() {\n\n  int[] a = new int[10];\n  int j=0;\n  while (j<a.length) {\n     a[j] = j;\n     j++;\n  }\n\n  for (int x : a) \n     printInt(x);\n\n  int x = 45;\n  printInt(x);\n  return 0;\n}",
      "array001.output": "0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n45\n",
      "array002.lat": "int [] doubleArray (int [] a){\n  int [] res = new int [a . length];\n  int i = 0 ;\n  for (int n : a){\n    res [i] = 2 * n ;\n    i ++ ;\n  }\n  return res ;\n}\n\nvoid shiftLeft (int [] a){\n  int x = a [0];\n  int i = 0 ;\n  while (i < a.length - 1){\n    a [i] = a [i + 1];\n    i ++ ;\n  }\n  a[a.length - 1]= x ;\n  return;\n }\n\nint scalProd(int[] a, int[] b) {\n  int res = 0;\n  int i = 0;\n  while (i < a.length) {\n    res = res + a[i] * b[i];\n    i++;\n  }\n  return res;\n}\n\nint main () {\n  int [] a = new int [5];\n  int i = 0 ;\n  while (i < a.length){\n    a [i]= i ;\n    i ++ ;\n    }\n  shiftLeft (a);\n  int [] b = doubleArray (a);\n  for (int x : a)printInt (x);\n  for (int x : b)printInt (x);\n  printInt(scalProd(a,b));\n  return 0 ;\n}\n ",
      "array002.output": "1\n2\n3\n4\n0\n2\n4\n6\n8\n0\n60\n"
    },
    "objects1": {
      "counter.lat": "int main () {\n  Counter c;\n  c = new Counter;\n  c.incr();\n  c.incr();\n  c.incr();\n  int x = c.value();\n  printInt(x);\n  return 0;\n}\n\nclass Counter {\n  int val;\n\n  void incr () {val++; return;}\n\n  int value () {return val;}\n\n}\n",
      "counter.output": "3\n",
      "linked.lat": "class Node {\n  int elem;\n  Node next;\n\n  void setElem(int c) { elem = c; }\n\n  void setNext(Node n) { next = n; }\n\n  int getElem() { return elem; }\n\n  Node getNext() { return next; }\n}\n\nclass Stack {\n  Node head;\n\n  void push(int c) {\n    Node newHead = new Node;\n    newHead.setElem(c);\n    newHead.setNext(head);\n    head = newHead;\n  }\n\n  boolean isEmpty() {\n    return head==(Node)null;\n  }\n\n  int top() {\n    return head.getElem();\n  }\n\n  void pop() {\n    head = head.getNext();\n  }\n}\n\nint main() {\n   Stack s = new Stack;\n   int i= 0;\n   while (i<10) {\n     s.push(i);\n     i++;\n   }\n     \n   while (!s.isEmpty()) {\n     printInt(s.top());\n     s.pop();\n   }\n   return 0;\n}\n",
      "linked.output": "9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n",
      "points.lat": "class Point2 {\n  int x;\n  int y;\n\n  void move (int dx, int dy) {\n     x = x + dx;\n     y = y + dy;\n  }\n\n  int getX () { return x; }\n\n  int getY () { return y; }\n}\n\nclass Point3 extends Point2 {\n  int z;\n\n  void moveZ (int dz) {\n    z = z + dz;\n  }\n\n  int getZ () { return z; }\n\n}\n\nclass Point4 extends Point3 {\n  int w;\n\n  void moveW (int dw) {\n    w = w + dw;\n  }\n\n  int getW () { return w; }\n\n}\n\n\n\nint main () {\n  Point2 p = new Point3;\n\n  Point3 q = new Point3;\n\n  Point4 r = new Point4;\n\n  q.move(2,4);\n  q.moveZ(7);\n  p = q;\n\n  p.move(3,5);\n \n  r.move(1,3);\n  r.moveZ(6);\n  r.moveW(2);\n\n  printInt(p.getX());  \n  printInt(p.getY());  \n  printInt(q.getZ());  \n  printInt(r.getW());\n  return 0;\n\n}",
      "points.output": "5\n9\n7\n2\n",
      "queue.lat": "class Node {\n  int elem;\n  Node next;\n\n  void setElem (int e)  { elem = e; }\n  void setNext (Node n) { next = n; }\n\n  int  getElem () { return elem; }\n  Node getNext () { return next; }\n\n}\n\nclass IntQueue {\n  Node front;\n  Node rear;\n\n  boolean isEmpty () { return front == (Node)null; }\n\n  void insert (int x) {\n    Node last = new Node;\n    last.setElem(x);\n    if (self.isEmpty())\n      front = last;\n    else \n      rear.setNext(last);\n    rear = last;\n  }\n\n  int first () { return front.getElem(); }\n\n  void rmFirst () {\n    front = front.getNext();\n  }\n\n  int size () {\n      Node n = front;\n      int res = 0;\n      while (n != (Node)null) {\n        n = n.getNext();\n        res++;\n      }\n     return res;\n  }\n}\n\nint f (int x) {\n  return x*x + 3;\n}\n\nint main () {\n  IntQueue q = new IntQueue;\n  q.insert(f(3));\n  q.insert(5);\n  q.insert(7);\n  printInt(q.first());\n  q.rmFirst();\n  printInt(q.size());\n  return 0;\n}\n\n     ",
      "queue.output": "12\n2\n"
    },
    "objects2": {
      "shapes.lat": "class Node {\n  Shape elem;\n  Node next;\n\n  void setElem(Shape c) { elem = c; }\n\n  void setNext(Node n) { next = n; }\n\n  Shape getElem() { return elem; }\n\n  Node getNext() { return next; }\n}\n\nclass Stack {\n  Node head;\n\n  void push(Shape c) {\n    Node newHead = new Node;\n    newHead.setElem(c);\n    newHead.setNext(head);\n    head = newHead;\n  }\n\n  boolean isEmpty() {\n    return head==(Node)null;\n  }\n\n  Shape top() {\n    return head.getElem();\n  }\n\n  void pop() {\n    head = head.getNext();\n  }\n}\n\nclass Shape {\n  void tell () {\n    printString(\"I'm a shape\");\n  }\n\n  void tellAgain() {\n     printString(\"I'm just a shape\");\n  }\n}\n\nclass Rectangle extends Shape {\n  void tellAgain() {\n    printString(\"I'm really a rectangle\");\n  }\n}\n\nclass Circle extends Shape {\n  void tellAgain() {\n    printString(\"I'm really a circle\");\n  }\n}\n\nclass Square extends Rectangle {\n  void tellAgain() {\n    printString(\"I'm really a square\");\n  }\n}\n\nint main() {\n  Stack stk = new Stack;\n  Shape s = new Shape;\n  stk.push(s);\n  s = new Rectangle;\n  stk.push(s);\n  s = new Square;\n  stk.push(s);\n  s = new Circle;\n  stk.push(s);\n  while (!stk.isEmpty()) {\n    s = stk.top();\n    s.tell();\n    s.tellAgain();\n    stk.pop();\n  }\n  return 0;\n}\n",
      "shapes.output": "I'm a shape\nI'm really a circle\nI'm a shape\nI'm really a square\nI'm a shape\nI'm really a rectangle\nI'm a shape\nI'm just a shape\n"
    },
    "struct": {
      "list.lat": "class list {\n  int elem;\n  list next;\n}\n\nint main() {\n  printInt(length(fromTo(1,50)));\n  printInt(length2(fromTo(1,100)));\n  return 0;\n}\n\nint head (list xs) {\n  return xs . elem;\n}\n \nlist cons (int x, list xs) {\n  list n;\n  n = new list;\n  n.elem = x;\n  n.next = xs;\n  return n;\n}\n\nint length (list xs) {\n  if (xs==(list)null)\n    return 0;\n  else\n    return 1 + length (xs.next);\n}\n\nlist fromTo (int m, int n) {\n  if (m>n)\n    return (list)null;\n  else \n    return cons (m,fromTo (m+1,n));\n}\n\nint length2 (list xs) {\n  int res = 0;\n  while (xs != (list)null) {\n    res++;\n    xs = xs.next;\n  }\n  return res;\n}\n",
      "list.output": "50\n100\n"
    }
  }
}